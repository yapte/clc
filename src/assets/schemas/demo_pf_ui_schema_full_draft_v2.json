{
  "graph_def_file_schema": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
    "description": "Libs: platform_mdk v0.39.0; pipeline_framework: v0.17.0",
    "properties": {
      "relations": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "inputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "outputs": {
              "oneOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "required": []
        }
      },
      "nodes": {
        "title": "Parameters of object",
        "description": "All parameters that needed to init an object",
        "type": "object",
        "additionalProperties": {
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "mdk_fuzzy_controller",
                "mdk_switch_controller",
                "mdk_fuzzy_input_validation",
                "mdk_fuzzy_mfunction_expression",
                "mdk_fuzzy_pid_controller",
                "mdk_sindy_mpc",
                "mdk_controller_execute",
                "mdk_controller_configure",
                "mdk_trainer",
                "mdk_make_inference",
                "mdk_expressions_evaluator",
                "mdk_sequential_pipeline",
                "feeders_sp_processor",
                "platform_write",
                "platform_write_blob",
                "platform_write_last",
                "platform_read_realtime",
                "platform_read_latest",
                "platform_read_blob_realtime",
                "platform_subscription",
                "platform_raw_subscription",
                "platform_get_artifact",
                "platform_get_latest_artifact",
                "platform_get_inference_wrapper",
                "platform_upload_artifacts",
                "df_rename",
                "df_clip_data",
                "df_update",
                "df_merge",
                "df_to_named_artifact",
                "df_control_selection",
                "df_clip_control_with_step_limits",
                "branching_split",
                "branching_condition",
                "branching_binary_condition",
                "branching_merge",
                "branching_choose_one",
                "examples_console_log",
                "examples_range_dataframe"
              ]
            }
          },
          "allOf": [
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_fuzzy_controller"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_fuzzy_controller"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_switch_controller"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_switch_controller"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_fuzzy_input_validation"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_fuzzy_input_validation"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_fuzzy_mfunction_expression"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_fuzzy_mfunction_expression"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_fuzzy_pid_controller"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_fuzzy_pid_controller"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_sindy_mpc"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_sindy_mpc"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_controller_execute"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_controller_execute"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_controller_configure"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_controller_configure"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_trainer"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_trainer"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_make_inference"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_make_inference"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_expressions_evaluator"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_expressions_evaluator"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "mdk_sequential_pipeline"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/mdk_sequential_pipeline"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "feeders_sp_processor"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/feeders_sp_processor"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_write"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_write"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_write_blob"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_write_blob"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_write_last"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_write_last"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_read_realtime"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_read_realtime"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_read_latest"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_read_latest"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_read_blob_realtime"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_read_blob_realtime"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_subscription"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_subscription"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_raw_subscription"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_raw_subscription"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_get_artifact"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_get_artifact"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_get_latest_artifact"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_get_latest_artifact"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_get_inference_wrapper"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_get_inference_wrapper"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "platform_upload_artifacts"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/platform_upload_artifacts"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_rename"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_rename"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_clip_data"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_clip_data"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_update"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_update"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_merge"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_merge"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_to_named_artifact"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_to_named_artifact"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_control_selection"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_control_selection"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "df_clip_control_with_step_limits"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/df_clip_control_with_step_limits"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "branching_split"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/branching_split"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "branching_condition"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/branching_condition"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "branching_binary_condition"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/branching_binary_condition"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "branching_merge"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/branching_merge"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "branching_choose_one"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/branching_choose_one"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "examples_console_log"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/examples_console_log"
              }
            },
            {
              "if": {
                "properties": {
                  "type": {
                    "const": "examples_range_dataframe"
                  }
                }
              },
              "then": {
                "$ref": "#/$defs/pplfw_nodes/examples_range_dataframe"
              }
            }
          ]
        }
      }
    },
    "required": ["relations", "nodes"],
    "$defs": {
      "pplfw_nodes": {
        "mdk_fuzzy_controller": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_fuzzy_controller",
              "title": "Mdk fuzzy controller",
              "description": "Wrapper for platform_mdk fuzzy controllers: `BaseFuzzyController` and `ErrDiffFuzzy`"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "controller": {
                  "title": "Controller",
                  "description": "Serialized platform_mdk `basefuzzycontroller` or `errdifffuzzy`",
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["BaseFuzzyController", "ErrDiffFuzzy"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "BaseFuzzyController"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/BaseFuzzyController"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ErrDiffFuzzy"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ErrDiffFuzzy"
                      }
                    }
                  ]
                }
              },
              "required": ["controller"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_switch_controller": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_switch_controller",
              "title": "Mdk switch controller",
              "description": "Wrapper for platform_mdk switch controller `SwitchController`"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "controller": {
                  "title": "Controller",
                  "description": "Serialized platform_mdk `basefuzzycontroller` or `errdifffuzzy`",
                  "$ref": "#/$defs/SwitchController"
                }
              },
              "required": ["controller"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_fuzzy_input_validation": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_fuzzy_input_validation",
              "title": "Mdk fuzzy input validation",
              "description": "Node responsible for fuzzy user input validation."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "validations": {
                  "title": "Validations",
                  "description": "List of dictionaries containing information about user input variables and their validations.\nwill be parsed into list of validationentity objects",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {}
                  }
                },
                "logs_signal_name": {
                  "title": "Logs signal name",
                  "description": "Name of the signal to which potential errors will be logged.",
                  "type": "string"
                }
              },
              "required": ["validations", "logs_signal_name"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_fuzzy_mfunction_expression": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_fuzzy_mfunction_expression",
              "title": "Mdk fuzzy mfunction expression",
              "description": "A node for evaluating expressions for membership function terms in a fuzzy controller"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "expressions": {
                  "title": "Expressions",
                  "description": "A list of tuples containing the name, term name, bounds type,\nand expression for each membership function to evaluate.",
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "string"
                      }
                    ],
                    "minItems": 4,
                    "maxItems": 4
                  }
                }
              },
              "required": ["expressions"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_fuzzy_pid_controller": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_fuzzy_pid_controller",
              "title": "Mdk fuzzy pid controller",
              "description": "Wrapper for platform_mdk FuzzyPID controller"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "controller": {
                  "title": "Controller",
                  "description": "Platform_mdk fuzzypid controller",
                  "$ref": "#/$defs/FuzzyPID"
                }
              },
              "required": ["controller"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_sindy_mpc": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_sindy_mpc",
              "title": "Mdk sindy mpc",
              "description": "Wrapper for platform_mdk SINDyMPC"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "controller": {
                  "title": "Controller",
                  "description": "Sindympc controller",
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["SINDyMPC", "SINDyDeltaMPC", "SINDyMPCwithMapping"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SINDyMPC"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SINDyMPC"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SINDyDeltaMPC"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SINDyDeltaMPC"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SINDyMPCwithMapping"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SINDyMPCwithMapping"
                      }
                    }
                  ]
                }
              },
              "required": ["controller"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_controller_execute": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_controller_execute",
              "title": "Mdk controller execute",
              "description": "A node for executing a controller on a given data input. Can also return controller status message."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "return_deltas": {
                  "title": "Return deltas",
                  "description": "Indicates whether to return the control deltas instead of the control values.",
                  "type": "boolean"
                },
                "explanation_signal_name": {
                  "title": "Explanation signal name",
                  "description": "Name of explanation column in output explanation dataframe, default is \"control_explanation\"",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "status_signal_name": {
                  "title": "Status signal name",
                  "description": "Name of status column in output status dataframe, default is \"control_status\"",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_controller_configure": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_controller_configure",
              "title": "Mdk controller configure",
              "description": "A node for controller configuration"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "configuration_signals": {
                  "title": "Configuration signals",
                  "description": "Signals to use for controller configuration,\ndict {signal_name: last_signal_value} will be passed to controller.configure()",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "status_signal": {
                  "title": "Status signal",
                  "description": "Signal to log configuration status",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["configuration_signals"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_trainer": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_trainer",
              "title": "Mdk trainer",
              "description": "Node for training MDK models"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "out_artifact": {
                  "title": "Out artifact",
                  "description": "Platform artifact name",
                  "type": "string"
                },
                "model": {
                  "title": "Model",
                  "description": "Platform_mdk estimator, could be passed in both ways as object and as object dict representation",
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["MultiWindowSINDyModel", "MultiWindowSINDyModelWithDelay"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MultiWindowSINDyModel"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MultiWindowSINDyModel"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MultiWindowSINDyModelWithDelay"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MultiWindowSINDyModelWithDelay"
                      }
                    }
                  ]
                },
                "train_preproc": {
                  "title": "Train preproc",
                  "description": "Train time specific preprocessing, could be passed in both ways as object and as object dict representation",
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["SequentialPipeline", "NoneType"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SequentialPipeline"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SequentialPipeline"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "NoneType"
                          }
                        }
                      },
                      "then": {
                        "type": "null"
                      }
                    }
                  ]
                },
                "inference_preproc": {
                  "title": "Inference preproc",
                  "description": "Inference time specific preprocessing,\ncould be passed in both ways as object and as object dict representation",
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["SequentialPipeline", "NoneType"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SequentialPipeline"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SequentialPipeline"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "NoneType"
                          }
                        }
                      },
                      "then": {
                        "type": "null"
                      }
                    }
                  ]
                },
                "features": {
                  "title": "Features",
                  "description": "Features used by estimator",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "targets": {
                  "title": "Targets",
                  "description": "Estimator targets",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "manipulated_vars": {
                  "title": "Manipulated vars",
                  "description": "Manipulated variables used by estimator",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["out_artifact", "model"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_make_inference": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_make_inference",
              "title": "Mdk make inference",
              "description": "A node for executing inference wrapper on input data"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "target_suffix": {
                  "title": "Target suffix",
                  "description": "Suffix to use for target columns naming",
                  "type": "string"
                },
                "renaming_mode": {
                  "title": "Renaming mode",
                  "description": "\"concat\" or \"replace\"",
                  "type": "string"
                },
                "substring": {
                  "title": "Substring",
                  "description": "Substring to replace in \"replace\" mode",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["target_suffix"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_expressions_evaluator": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_expressions_evaluator",
              "title": "Mdk expressions evaluator",
              "description": "Wrapper for platform_mdk Evaluator"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "evaluator": {
                  "title": "Evaluator",
                  "description": "Serialized platform_mdk evaluator",
                  "$ref": "#/$defs/Evaluator"
                }
              },
              "required": ["evaluator"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "mdk_sequential_pipeline": {
          "type": "object",
          "properties": {
            "type": {
              "const": "mdk_sequential_pipeline",
              "title": "Mdk sequential pipeline",
              "description": "Wrapper for MDK SequentialPipeline execution"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "pipeline": {
                  "title": "Pipeline",
                  "description": "Serialized platform_mdk sequentialpipeline",
                  "$ref": "#/$defs/SequentialPipeline"
                }
              },
              "required": ["pipeline"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "feeders_sp_processor": {
          "type": "object",
          "properties": {
            "type": {
              "const": "feeders_sp_processor",
              "title": "Feeders sp processor",
              "description": "Process feeders summary set point and dived it by feeders in operation"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "feeder_sp_sum_name": {
                  "title": "Feeder sp sum name",
                  "description": "Name of the feeder sp sum column",
                  "type": "string"
                },
                "feeder_mappings": {
                  "title": "Feeder mappings",
                  "description": "Mapping feeders signals name to feeder dto attributes",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "with_multipliers": {
                  "title": "With multipliers",
                  "description": "Flag to enable or disable multipliers usage",
                  "type": "boolean"
                },
                "fix_manual": {
                  "title": "Fix manual",
                  "description": "Flag to enable or disable adjustment of the sum of set points for manual feeders",
                  "type": "boolean"
                }
              },
              "required": ["feeder_sp_sum_name", "feeder_mappings"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_write": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_write",
              "title": "Platform write",
              "description": "Write data to platform signals"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "signals_ids": {
                  "title": "Signals ids",
                  "description": "The list of signals to write. default is none.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "validate": {
                  "title": "Validate",
                  "description": "Whether to validate the signal data. default is false.",
                  "type": "boolean"
                },
                "n_rows": {
                  "title": "N rows",
                  "description": "The number of rows from the end of the data frame to be sent to the platform.\nthe default is none. if set to none, the node will write the entire input to the platform.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "verbose": {
                  "title": "Verbose",
                  "description": "Temporary unavailable",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "strict": {
                  "title": "Strict",
                  "description": "Flag to fail or not when data doesn't contain columns which is specified in signals_ids",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_write_blob": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_write_blob",
              "title": "Platform write blob",
              "description": "Write DataFrame to blob signal, could be used only with json serializable objects"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "signals_ids": {
                  "title": "Signals ids",
                  "description": "List of signals' public ids to write",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "validate": {
                  "title": "Validate",
                  "description": "Validate argument to pass to platform sdk signalwriterclient",
                  "type": "boolean"
                },
                "is_dropna": {
                  "title": "Is dropna",
                  "description": "Filter nan values before write batches",
                  "type": "boolean"
                },
                "verbose": {
                  "title": "Verbose",
                  "description": "Temporary unavailable",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "strict": {
                  "title": "Strict",
                  "description": "Temporary unavailable",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_write_last": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_write_last",
              "title": "Platform write last",
              "description": "Write last_values and last row of history from control input with last history timestamp"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "signals_ids": {
                  "title": "Signals ids",
                  "description": "List of signals to write from controlinput",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "validate": {
                  "title": "Validate",
                  "description": "Validate argument to pass to platform sdk signalwriterclient",
                  "type": "boolean"
                },
                "verbose": {
                  "title": "Verbose",
                  "description": "Temporary unavailable",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "strict": {
                  "title": "Strict",
                  "description": "Temporary unavailable",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["signals_ids"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_read_realtime": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_read_realtime",
              "title": "Platform read realtime",
              "description": "Read the specified amount of data from current timestamp using request method"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "signals_ids": {
                  "title": "Signals ids",
                  "description": "List of signals public ids to read",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "history_size": {
                  "title": "History size",
                  "description": "History size in format that could be parsed with pd.timedelta",
                  "type": "string"
                },
                "granularity": {
                  "title": "Granularity",
                  "description": "Data granularity. must be less than the date range specified.",
                  "type": "string"
                },
                "interval_op": {
                  "title": "Interval op",
                  "description": "Interval operator to be applied to the date range intervals. defaults to intervaloperator.last",
                  "type": "string"
                },
                "closed": {
                  "title": "Closed",
                  "description": "Specifies how the date range should be closed. defaults to intervalclosed.both",
                  "type": "string"
                },
                "validate": {
                  "title": "Validate",
                  "description": "Whether to perform additional validations before reading. defaults to false.",
                  "type": "boolean"
                },
                "dtype": {
                  "title": "Dtype",
                  "description": "Specific data type. default is default_data_type.",
                  "type": "string"
                },
                "n_jobs": {
                  "title": "N jobs",
                  "description": "Number of parallel requests for reading history. if 1, read sequentially. defaults to 1.",
                  "type": "integer"
                }
              },
              "required": ["signals_ids", "history_size", "granularity"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_read_latest": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_read_latest",
              "title": "Platform read latest",
              "description": "Read the latest values from specified signals"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "signals_ids": {
                  "title": "Signals ids",
                  "description": "List of signals' public ids to read",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": ["signals_ids"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_read_blob_realtime": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_read_blob_realtime",
              "title": "Platform read blob realtime",
              "description": "Read data from multiple BLOB signals with specified history size from moment when called."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "signals_ids": {
                  "title": "Signals ids",
                  "description": "List of signals public ids to read.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "history_size": {
                  "title": "History size",
                  "description": "History size in ``pandas.timedelta`` format.",
                  "type": "string"
                }
              },
              "required": ["signals_ids", "history_size"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_subscription": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_subscription",
              "title": "Platform subscription",
              "description": "SDK subscription node"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "history_size": {
                  "title": "History size",
                  "description": "Size of history compatible with pd.timestamp",
                  "type": "string"
                },
                "granularity": {
                  "title": "Granularity",
                  "description": "Data granularity compatible with pd.timedelta",
                  "type": "string"
                },
                "listen_signals": {
                  "title": "Listen signals",
                  "description": "List of signals to listen to",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "interval_op": {
                  "title": "Interval op",
                  "description": "Interval operator to be applied to the date range intervals. defaults to intervaloperator.last",
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": ["MIN", "MAX", "AVG", "MEDIAN", "LAST"]
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "prefill_strategy": {
                  "title": "Prefill strategy",
                  "description": "Defaults to defaultfillstrategy.prefill_last_reindex.",
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "FILLNA",
                        "FFILL",
                        "PREFILL_AVG_REINDEX",
                        "PREFILL_MIN_REINDEX",
                        "PREFILL_MAX_REINDEX",
                        "PREFILL_MEDIAN_REINDEX",
                        "PREFILL_LAST_REINDEX"
                      ]
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "fetch_last_values_for_nan_cols": {
                  "title": "Fetch last values for nan cols",
                  "description": "If true will try to fetch last values for columns that have nans in the first row",
                  "anyOf": [
                    {
                      "type": "boolean"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "freeze_warning_every": {
                  "title": "Freeze warning every",
                  "description": " number of subsequent snapshots without any updates before throwing a warning.\nif your data is coming irregularly, you can increase this parameter to suppress excessive warnings.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "freeze_failing_after_iters": {
                  "title": "Freeze failing after iters",
                  "description": "If specified, number of subsequent snapshots without any updates in data before failing.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "dtype": {
                  "title": "Dtype",
                  "description": "Must be one of \"float32\" or \"float64.\"",
                  "type": "string"
                },
                "store_last_snapshot": {
                  "title": "Store last snapshot",
                  "description": "If true will store copy of last snapshot in memory in order to dump it if a pipeline fails",
                  "type": "boolean"
                }
              },
              "required": ["history_size", "granularity", "listen_signals"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_raw_subscription": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_raw_subscription",
              "title": "Platform raw subscription",
              "description": "SDK raw subscription node"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "history_size": {
                  "title": "History size",
                  "description": "Size of history compatible with pd.timestamp",
                  "type": "string"
                },
                "listen_signals": {
                  "title": "Listen signals",
                  "description": "List of signals to listen to",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "freeze_warning_every": {
                  "title": "Freeze warning every",
                  "description": "Number of subsequent snapshots without any updates before throwing a warning.\nif your data is coming irregularly, you can increase this parameter to suppress excessive warnings.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "freeze_failing_after_iters": {
                  "title": "Freeze failing after iters",
                  "description": "If specified, number of subsequent snapshots without any updates in data before failing.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "dtype": {
                  "title": "Dtype",
                  "description": "Must be one of \"float32\" or \"float64.\"",
                  "type": "string"
                },
                "store_last_snapshot": {
                  "title": "Store last snapshot",
                  "description": "If true will store copy of last snapshot in memory to dump it if a pipeline fails",
                  "type": "boolean"
                }
              },
              "required": ["history_size", "listen_signals"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_get_artifact": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_get_artifact",
              "title": "Platform get artifact",
              "description": "Download artifact by its id"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "artifact_id": {
                  "title": "Artifact id",
                  "description": "Id of the artifact to download",
                  "type": "integer"
                },
                "encrypted": {
                  "title": "Encrypted",
                  "description": "Temporary unavailable",
                  "type": "boolean"
                }
              },
              "required": ["artifact_id"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_get_latest_artifact": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_get_latest_artifact",
              "title": "Platform get latest artifact",
              "description": "Download the latest artifact by its name"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "artifact_name": {
                  "title": "Artifact name",
                  "description": "Name of artifact to download",
                  "type": "string"
                },
                "encrypted": {
                  "title": "Encrypted",
                  "description": "Temporary unavailable",
                  "type": "boolean"
                }
              },
              "required": ["artifact_name"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_get_inference_wrapper": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_get_inference_wrapper",
              "title": "Platform get inference wrapper",
              "description": "Download inference artifacts from platform artifact storage by its name and keeps it up to date"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "artifacts_names": {
                  "title": "Artifacts names",
                  "description": "Names of artifacts in platform artifact storage",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "encrypted": {
                  "title": "Encrypted",
                  "description": "Temporary unavailable",
                  "type": "boolean"
                }
              },
              "required": ["artifacts_names"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "platform_upload_artifacts": {
          "type": "object",
          "properties": {
            "type": {
              "const": "platform_upload_artifacts",
              "title": "Platform upload artifacts",
              "description": "Node for artifacts upload"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "encrypted": {
                  "title": "Encrypted",
                  "description": "If true will encrypt artifact before upload",
                  "type": "boolean"
                },
                "ttl_hours": {
                  "title": "Ttl hours",
                  "description": "Ttl for uploaded artifacts in hours",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_rename": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_rename",
              "title": "Df rename",
              "description": "Rename input pd.DataFrame or ControlInput entities"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "rename_dict": {
                  "title": "Rename dict",
                  "description": "Dict where keys are original names and values are new one",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["rename_dict"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_clip_data": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_clip_data",
              "title": "Df clip data",
              "description": "Clip data in dataframe with specified values. Also, can get clip boundaries from additional inputs by its name"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "clip_config": {
                  "title": "Clip config",
                  "description": "Configuration for upper and lower bounds includes \"upper_bounds\" and \"lower_bounds\" keys,\nwhich contain dictionaries mapping column names to clip boundaries.\nif a string is passed as the value in either mappings, it will be used to find a variable with that name\nin the second, third, and subsequent inputs.",
                  "type": "object",
                  "additionalProperties": {}
                }
              },
              "required": ["clip_config"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_update": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_update",
              "title": "Df update",
              "description": "Node that adds values to ControlInput"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_merge": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_merge",
              "title": "Df merge",
              "description": "Merge multiple DataFrames by index using selected merge kind."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "kind": {
                  "title": "Kind",
                  "description": "Merge kind. default is outer.",
                  "type": "string"
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_to_named_artifact": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_to_named_artifact",
              "title": "Df to named artifact",
              "description": "Serialize DataFrame to Parquet or CSV bytes and output a NamedArtifact object."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "name": {
                  "title": "Name",
                  "description": "Artifact name.",
                  "type": "string"
                },
                "kind": {
                  "title": "Kind",
                  "description": "Artifact kind. default is parquet.",
                  "type": "string"
                },
                "pd_params": {
                  "title": "Pd params",
                  "description": "Optional keyword arguments to pass to serialization function. default is none.",
                  "anyOf": [
                    {
                      "type": "object",
                      "additionalProperties": {}
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["name"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_control_selection": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_control_selection",
              "title": "Df control selection",
              "description": "A node that selects only set points which user wants to apply"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "control_mapping": {
                  "title": "Control mapping",
                  "description": "A dictionary where keys are names of set points and values are the names of control selection flag",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["control_mapping"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "df_clip_control_with_step_limits": {
          "type": "object",
          "properties": {
            "type": {
              "const": "df_clip_control_with_step_limits",
              "title": "Df clip control with step limits",
              "description": "Clip columns by aggregation with upper, lower bounds from data and inner bounds with step limits to smooth clipping."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "mv_columns": {
                  "title": "Mv columns",
                  "description": "Column names of manipulated variables",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "step_limits": {
                  "title": "Step limits",
                  "description": "Values for each setpoint to make bounds more precisely",
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                },
                "tech_hi": {
                  "title": "Tech hi",
                  "description": "Mapping tech lower bound for each manipulated variable",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "tech_lo": {
                  "title": "Tech lo",
                  "description": "Mapping tech higher bound for each manipulated variable",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "inner_lo": {
                  "title": "Inner lo",
                  "description": "Our lower bounds mapping for each manipulated variable.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "inner_hi": {
                  "title": "Inner hi",
                  "description": "Our higher bounds mapping for each manipulated variable.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "required": ["mv_columns", "step_limits", "tech_hi", "tech_lo", "inner_lo", "inner_hi"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "branching_split": {
          "type": "object",
          "properties": {
            "type": {
              "const": "branching_split",
              "title": "Branching split",
              "description": "Node that chooses one execution path depending on condition is True or False"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "n_branches": {
                  "title": "N branches",
                  "description": "Number of branches that will be created by this node",
                  "type": "integer"
                }
              },
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "branching_condition": {
          "type": "object",
          "properties": {
            "type": {
              "const": "branching_condition",
              "title": "Branching condition",
              "description": "Node that allows to choose number of execution branch according to specified conditions"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "conditions": {
                  "title": "Conditions",
                  "description": "A list of dictionaries representing conditions should contain keys\nthat allow the creation of a condition instance for each dictionary.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "branch_number": {
                        "type": "integer"
                      },
                      "expression": {
                        "type": "object",
                        "properties": {
                          "__instance__": {
                            "type": "string",
                            "enum": ["NumExpression", "SinglePandasExpression"]
                          }
                        },
                        "allOf": [
                          {
                            "if": {
                              "properties": {
                                "__instance__": {
                                  "const": "NumExpression"
                                }
                              }
                            },
                            "then": {
                              "$ref": "#/$defs/NumExpression"
                            }
                          },
                          {
                            "if": {
                              "properties": {
                                "__instance__": {
                                  "const": "SinglePandasExpression"
                                }
                              }
                            },
                            "then": {
                              "$ref": "#/$defs/SinglePandasExpression"
                            }
                          }
                        ]
                      },
                      "priority": {
                        "type": "integer"
                      },
                      "name": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "null"
                          }
                        ]
                      }
                    },
                    "required": ["branch_number", "expression"]
                  }
                },
                "default_branch_number": {
                  "title": "Default branch number",
                  "description": "The branch number to use if all the conditions are false.",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "required": ["conditions"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "branching_binary_condition": {
          "type": "object",
          "properties": {
            "type": {
              "const": "branching_binary_condition",
              "title": "Branching binary condition",
              "description": "Evaluates a condition expression against a pandas DataFrame to decide between two branches.\nThe condition should return 0 or 1, corresponding to the branch number."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "condition": {
                  "title": "Condition",
                  "description": "This expression should return 0 or 1, which will be used as a branch number",
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["NumExpression", "SinglePandasExpression"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "NumExpression"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/NumExpression"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SinglePandasExpression"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SinglePandasExpression"
                      }
                    }
                  ]
                }
              },
              "required": ["condition"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "branching_merge": {
          "type": "object",
          "properties": {
            "type": {
              "const": "branching_merge",
              "title": "Branching merge",
              "description": "Select input from branch that was selected previously in branching node"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "branching_choose_one": {
          "type": "object",
          "properties": {
            "type": {
              "const": "branching_choose_one",
              "title": "Branching choose one",
              "description": "Node that takes a list of options and an index as inputs and returns one of the options based on the index value."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "examples_console_log": {
          "type": "object",
          "properties": {
            "type": {
              "const": "examples_console_log",
              "title": "Examples console log",
              "description": "Console log node for example DAG."
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {},
              "required": [],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        },
        "examples_range_dataframe": {
          "type": "object",
          "properties": {
            "type": {
              "const": "examples_range_dataframe",
              "title": "Examples range dataframe",
              "description": "Range DataFrame node for example DAG"
            },
            "params": {
              "title": "Node parameters",
              "description": "All parameters that needed to init the node",
              "type": "object",
              "properties": {
                "n": {
                  "title": "N",
                  "description": "The number of elements to generate in the range.",
                  "type": "integer"
                },
                "col_name": {
                  "title": "Col name",
                  "description": "The name of the column for the generated range. defaults to \"x\".",
                  "type": "string"
                }
              },
              "required": ["n"],
              "additionalProperties": false
            }
          },
          "required": ["type"]
        }
      },
      "AdvancedReferencePoint": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "User define by himself the whole update logic.",
        "properties": {
          "__instance__": {
            "const": "AdvancedReferencePoint"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Name of reference point, update is fetched by this name. example: \"feedrate_low\"",
                "type": "string"
              },
              "reference_point": {
                "title": "Reference point",
                "description": "Expression for reference point calculation. the computed value can be accessed\nfor expressions using the reference_point identifier.\nexample: \"(low-b + low-c)/2\"",
                "type": "string"
              },
              "updates": {
                "title": "Updates",
                "description": "List of update expressions.\nexample: [(\"low-a\", \"low-a + shift\"), ...]",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "variables": {
                "title": "Variables",
                "description": "List of variables used in expressions and validations\nexample: [(\"shift\", \"feedrate_low - reference_point\"),\n(\"max_value\", \"feedrate-high-a - 10\"), ...]",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "minItems": 2,
                      "maxItems": 2
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "validations": {
                "title": "Validations",
                "description": "List of validations.\nexample: [(\"feedrate_low<max_value\", \"feedrate_low should be less {max_value}\"), ...]",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "minItems": 2,
                      "maxItems": 2
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "label": {
                "title": "Label",
                "description": "This name will be used in update response message in case of invalid update.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["name", "reference_point", "updates"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "RulesContainer": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Encapsulate the sequence of fuzzy rules and operations with them",
        "properties": {
          "__instance__": {
            "const": "RulesContainer"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "antecedent_names": {
                "title": "Antecedent names",
                "description": "Names of all antecedents",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "consequent_names": {
                "title": "Consequent names",
                "description": "Names of all consequences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "rules": {
                "title": "Rules",
                "description": "Fuzzy rules that describe control for some system",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "antecedent": {
                      "type": "string"
                    },
                    "consequent": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "term": {
                            "type": "string"
                          },
                          "factor": {
                            "type": "number"
                          }
                        },
                        "required": ["name", "term"]
                      }
                    }
                  },
                  "required": ["name", "label", "antecedent", "consequent"]
                }
              },
              "granularity": {
                "title": "Granularity",
                "description": "Granularity for generating fuzzy variables space",
                "type": "integer"
              },
              "antecedent_mf_validation_precision": {
                "title": "Antecedent mf validation precision",
                "description": "Precision while checking member functions sum",
                "type": "number"
              },
              "and_operator": {
                "title": "And operator",
                "description": "Name of function used for logic and in rules calculation. possible functions:\n- andoperator.min\n- andoperator.prod\n- andoperator.gamacher_prod\n- andoperator.einstein_prod\n- andoperator.bounded_diff",
                "type": "string",
                "enum": ["min", "prod", "gamacher_prod", "einstein_prod", "bounded_diff"]
              },
              "or_operator": {
                "title": "Or operator",
                "description": "Name of function used for logic or in rules calculation. possible functions:\n- oroperator.max\n- oroperator.algebraic_sum\n- oroperator.gamacher_sum\n- oroperator.einstein_sum\n- oroperator.bounded_sum",
                "type": "string",
                "enum": ["max", "algebraic_sum", "gamacher_sum", "einstein_sum", "bounded_sum"]
              }
            },
            "required": ["antecedent_names", "consequent_names", "rules"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "RulesMatrix": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Matrix rules DTO",
        "properties": {
          "__instance__": {
            "const": "RulesMatrix"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Name of rules matrix",
                "type": "string"
              },
              "matrix": {
                "title": "Matrix",
                "description": "Terms matrix",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": [],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MatrixRulesContainer": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Encapsulate matrix of rules for two antecedents and one consequent",
        "properties": {
          "__instance__": {
            "const": "MatrixRulesContainer"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "rules_matrix": {
                "title": "Rules matrix",
                "description": "Matrix with rules e.g.:\n[[pb, ns, ok]\n[ns, ok, pb]\n[ok, pb, ns]]",
                "$ref": "#/$defs/RulesMatrix"
              },
              "row_antecedent": {
                "title": "Row antecedent",
                "description": "Name for the row antecedent, default name is \"error\"",
                "type": "string"
              },
              "col_antecedent": {
                "title": "Col antecedent",
                "description": "Name for column antecedent, default name is \"delta\"",
                "type": "string"
              },
              "consequent_name": {
                "title": "Consequent name",
                "description": "Default name is \"delta_u\"",
                "type": "string"
              },
              "granularity": {
                "title": "Granularity",
                "description": "Granularity for generating fuzzy variables space",
                "type": "integer"
              },
              "antecedent_mf_validation_precision": {
                "title": "Antecedent mf validation precision",
                "description": "Precision while checking member functions sum",
                "type": "number"
              },
              "and_operator": {
                "title": "And operator",
                "description": "Name of function used for logic and in rules calculation. possible functions:\n- andoperator.min\n- andoperator.prod\n- andoperator.gamacher_prod\n- andoperator.einstein_prod\n- andoperator.bounded_diff",
                "type": "string",
                "enum": ["min", "prod", "gamacher_prod", "einstein_prod", "bounded_diff"]
              },
              "or_operator": {
                "title": "Or operator",
                "description": "Name of function used for logic or in rules calculation. possible functions:\n- oroperator.max\n- oroperator.algebraic_sum\n- oroperator.gamacher_sum\n- oroperator.einstein_sum\n- oroperator.bounded_sum",
                "type": "string",
                "enum": ["max", "algebraic_sum", "gamacher_sum", "einstein_sum", "bounded_sum"]
              }
            },
            "required": ["rules_matrix"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "FuzzyVariableLimits": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Max and min limits for FuzzyVariableConfig",
        "properties": {
          "__instance__": {
            "const": "FuzzyVariableLimits"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "minimum": {
                "title": "Minimum",
                "description": "Minimum fuzzy variable value",
                "type": "number"
              },
              "maximum": {
                "title": "Maximum",
                "description": "Maximum fuzzy variable value",
                "type": "number"
              }
            },
            "required": ["minimum", "maximum"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SimpleReferencePoint": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Works only with trimf and trapmf member functions.",
        "properties": {
          "__instance__": {
            "const": "SimpleReferencePoint"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Name of reference point, update is fetched by this name. example: \"feedrate_low\"",
                "type": "string"
              },
              "pair_intersection": {
                "title": "Pair intersection",
                "description": "List of 2 term names for reference point calculation.\nreference point is considered as middle of the intersection of two functions.\nworks for trimf and trapmf only.\nexample: [\"low\", \"ok\"]",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "unfrozen_extra_points": {
                "title": "Unfrozen extra points",
                "description": "List of unfrozen points. these points will be processed together with reference point.\nexample: [\"low-a\"]\nnote: you don't need to specify unfrozen_extra_points for shift modification by default.\n    2 side trapmf points and all trimf points would be chosen by default.",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "label": {
                "title": "Label",
                "description": "This name will be used in update response message in case of invalid update.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "modification_type": {
                "title": "Modification type",
                "description": "Type of modification. may be \"shift\" or \"scale_all\", \"shift\" by default.",
                "type": "string",
                "enum": ["shift", "scale_all"]
              }
            },
            "required": ["name", "pair_intersection"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Type1AntecedentVariableConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Represents Type-1 Antecedent Fuzzy Variable",
        "properties": {
          "__instance__": {
            "const": "Type1AntecedentVariableConfig"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "fuzzy variable name which is used in related fuzzy rules e.g: circulation, mill_load",
                "type": "string"
              },
              "terms": {
                "title": "Terms",
                "description": " list of type-1 fuzzy terms",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "term_label": {
                      "type": "string",
                      "enum": [
                        "ok",
                        "crit",
                        "crit_high",
                        "crit_low",
                        "high",
                        "low",
                        "mid",
                        "nb",
                        "nc",
                        "nm",
                        "ns",
                        "pb",
                        "pc",
                        "pm",
                        "ps",
                        "ze"
                      ]
                    },
                    "bounds_params": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "bounds_type": {
                      "type": "string",
                      "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                    }
                  },
                  "required": ["term_label", "bounds_params", "bounds_type"]
                }
              },
              "limits": {
                "title": "Limits",
                "description": "max and min limits for current config",
                "$ref": "#/$defs/FuzzyVariableLimits"
              },
              "reference_points": {
                "title": "Reference points",
                "description": "list of reference points used for terms updates",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["SimpleReferencePoint", "AdvancedReferencePoint"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SimpleReferencePoint"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SimpleReferencePoint"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "AdvancedReferencePoint"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/AdvancedReferencePoint"
                      }
                    }
                  ]
                }
              }
            },
            "required": ["name", "terms"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Type2AntecedentVariableConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Represents Type2Antecedent Fuzzy Variable",
        "properties": {
          "__instance__": {
            "const": "Type2AntecedentVariableConfig"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "fuzzy variable name which is used in related fuzzy rules e.g: circulation, mill_load",
                "type": "string"
              },
              "terms": {
                "title": "Terms",
                "description": "list of type-2 fuzzy terms",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "term_label": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "crit",
                            "crit_high",
                            "crit_low",
                            "high",
                            "low",
                            "mid",
                            "nb",
                            "nc",
                            "nm",
                            "ns",
                            "pb",
                            "pc",
                            "pm",
                            "ps",
                            "ze"
                          ]
                        },
                        "lower_bounds_params": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "lower_bounds_type": {
                          "type": "string",
                          "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                        },
                        "upper_bounds_params": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "upper_bounds_type": {
                          "type": "string",
                          "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                        }
                      },
                      "required": [
                        "term_label",
                        "lower_bounds_params",
                        "lower_bounds_type",
                        "upper_bounds_params",
                        "upper_bounds_type"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "term_label": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "crit",
                            "crit_high",
                            "crit_low",
                            "high",
                            "low",
                            "mid",
                            "nb",
                            "nc",
                            "nm",
                            "ns",
                            "pb",
                            "pc",
                            "pm",
                            "ps",
                            "ze"
                          ]
                        },
                        "upper_bounds_params": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "upper_bounds_type": {
                          "type": "string",
                          "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                        },
                        "shift": {
                          "type": "number"
                        },
                        "scale": {
                          "type": "number"
                        }
                      },
                      "required": ["term_label", "upper_bounds_params", "upper_bounds_type", "shift", "scale"]
                    }
                  ]
                }
              }
            },
            "required": ["name", "terms"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Type1ConsequentVariableConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Represents Type-1 Consequent Fuzzy Variable",
        "properties": {
          "__instance__": {
            "const": "Type1ConsequentVariableConfig"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "fuzzy variable name which is used in related fuzzy rules e.g: circulation, mill_load",
                "type": "string"
              },
              "terms": {
                "title": "Terms",
                "description": " list of type-1 fuzzy terms",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "term_label": {
                      "type": "string",
                      "enum": [
                        "ok",
                        "crit",
                        "crit_high",
                        "crit_low",
                        "high",
                        "low",
                        "mid",
                        "nb",
                        "nc",
                        "nm",
                        "ns",
                        "pb",
                        "pc",
                        "pm",
                        "ps",
                        "ze"
                      ]
                    },
                    "bounds_params": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "bounds_type": {
                      "type": "string",
                      "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                    }
                  },
                  "required": ["term_label", "bounds_params", "bounds_type"]
                }
              },
              "limits": {
                "title": "Limits",
                "description": "max and min limits for current config",
                "$ref": "#/$defs/FuzzyVariableLimits"
              },
              "reference_points": {
                "title": "Reference points",
                "description": "list of reference points used for terms updates",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["SimpleReferencePoint", "AdvancedReferencePoint"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SimpleReferencePoint"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SimpleReferencePoint"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "AdvancedReferencePoint"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/AdvancedReferencePoint"
                      }
                    }
                  ]
                }
              }
            },
            "required": ["name", "terms"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Type2ConsequentVariableConfig": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Represents Type2Consequent Fuzzy Variable",
        "properties": {
          "__instance__": {
            "const": "Type2ConsequentVariableConfig"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "fuzzy variable name which is used in related fuzzy rules e.g: circulation, mill_load",
                "type": "string"
              },
              "terms": {
                "title": "Terms",
                "description": "list of type-2 fuzzy terms",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "term_label": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "crit",
                            "crit_high",
                            "crit_low",
                            "high",
                            "low",
                            "mid",
                            "nb",
                            "nc",
                            "nm",
                            "ns",
                            "pb",
                            "pc",
                            "pm",
                            "ps",
                            "ze"
                          ]
                        },
                        "lower_bounds_params": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "lower_bounds_type": {
                          "type": "string",
                          "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                        },
                        "upper_bounds_params": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "upper_bounds_type": {
                          "type": "string",
                          "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                        }
                      },
                      "required": [
                        "term_label",
                        "lower_bounds_params",
                        "lower_bounds_type",
                        "upper_bounds_params",
                        "upper_bounds_type"
                      ]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "term_label": {
                          "type": "string",
                          "enum": [
                            "ok",
                            "crit",
                            "crit_high",
                            "crit_low",
                            "high",
                            "low",
                            "mid",
                            "nb",
                            "nc",
                            "nm",
                            "ns",
                            "pb",
                            "pc",
                            "pm",
                            "ps",
                            "ze"
                          ]
                        },
                        "upper_bounds_params": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "number"
                          }
                        },
                        "upper_bounds_type": {
                          "type": "string",
                          "enum": ["trapmf", "trimf", "logmf_left", "logmf_right", "singleton"]
                        },
                        "shift": {
                          "type": "number"
                        },
                        "scale": {
                          "type": "number"
                        }
                      },
                      "required": ["term_label", "upper_bounds_params", "upper_bounds_type", "shift", "scale"]
                    }
                  ]
                }
              }
            },
            "required": ["name", "terms"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "BaseFuzzyController": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Base implementation of fuzzy controller",
        "properties": {
          "__instance__": {
            "const": "BaseFuzzyController"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "rules_container": {
                "title": "Rules container",
                "description": "Container with rules definition",
                "type": "object",
                "properties": {
                  "__instance__": {
                    "type": "string",
                    "enum": ["RulesContainer", "MatrixRulesContainer"]
                  }
                },
                "allOf": [
                  {
                    "if": {
                      "properties": {
                        "__instance__": {
                          "const": "RulesContainer"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/$defs/RulesContainer"
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "__instance__": {
                          "const": "MatrixRulesContainer"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/$defs/MatrixRulesContainer"
                    }
                  }
                ]
              },
              "antecedent_fuzzy_params": {
                "title": "Antecedent fuzzy params",
                "description": "Parameters for antecedent variables",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1AntecedentVariableConfig", "Type2AntecedentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1AntecedentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2AntecedentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "consequent_fuzzy_params": {
                "title": "Consequent fuzzy params",
                "description": "Parameters for consequent variables",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1ConsequentVariableConfig", "Type2ConsequentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1ConsequentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2ConsequentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "consequent_multiplier": {
                "title": "Consequent multiplier",
                "description": "Global consequent multiplier",
                "type": "number"
              },
              "reduction_alg": {
                "title": "Reduction alg",
                "description": "Type reduction algorithm using for type-2 inference\npossible reduction algorithms:\n- km (karnik - mendel algorithm)\n- ekm (enhanced karnik - mendel algorithm)\n- eiasc (enhanced iterative algorithm with stop condition)",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in logs, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "verbose": {
                "title": "Verbose",
                "description": "Flag to show logs",
                "type": "boolean"
              },
              "n_rules_to_show": {
                "title": "N rules to show",
                "description": "Number of rules sorted by priority shown at each execution step (_get_rules_executed() method)",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "strict": {
                "title": "Strict",
                "description": "Boolean flag, if set to true controller throws an error if some antecedents lie outside the defined space,\notherwise increment of affected consequents will be equal 0",
                "type": "boolean"
              },
              "configuration_attempts": {
                "title": "Configuration attempts",
                "description": "Number of extra tries for failed configuration updates,\nlook `extra_attempts` of `basevariableconfigscontainer` for more information",
                "type": "integer"
              }
            },
            "required": ["rules_container", "antecedent_fuzzy_params", "consequent_fuzzy_params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "BaseVariableConfigsContainer": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Container for store and process FuzzyVariableConfig objects",
        "properties": {
          "__instance__": {
            "const": "BaseVariableConfigsContainer"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "variable_configs": {
                "title": "Variable configs",
                "description": "List of fuzzyvariableconfig",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": [
                        "Type1AntecedentVariableConfig",
                        "Type1ConsequentVariableConfig",
                        "Type2AntecedentVariableConfig",
                        "Type2ConsequentVariableConfig"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1AntecedentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1ConsequentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2AntecedentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2ConsequentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "extra_attempts": {
                "title": "Extra attempts",
                "description": "Number of extra tries for fail status updates.\nthis attribute is useful for multiple conflicting updates for the same fuzzy variable.\n\nimagine, you have default config with feedrate_low=100 and feedrate_high=110,\nand here are values in incoming updates: feedrate_low=120, feedrate_high=130.\nin this situation feedrate_low raising will fail because it can't be more than old feedrate_high value 110,\nthen feedrate_high will be successfully setted to 130, then recently failed update of feedrate_low will will be\nsuccessfully handled within first extra attempt.\nfinally, all the updates will be processed even if they conflict at the start.",
                "type": "integer"
              }
            },
            "required": ["variable_configs"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ButterworthFilter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Butterworth filter",
        "properties": {
          "__instance__": {
            "const": "ButterworthFilter"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "input_columns": {
                "title": "Input columns",
                "description": "List of input signal names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "w_c": {
                "title": "W c",
                "description": "List of normalized cutoff frequencies corresponding to each input signal",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "order": {
                "title": "Order",
                "description": "Filter order",
                "type": "integer"
              },
              "filtfilt": {
                "title": "Filtfilt",
                "description": "Apply filtfilt or lfilter to a signal",
                "type": "boolean"
              }
            },
            "required": ["input_columns", "w_c"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CalculateLinearTrend": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Linear trend estimation with np.linalg.lstsq",
        "properties": {
          "__instance__": {
            "const": "CalculateLinearTrend"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "column": {
                "title": "Column",
                "description": "Column to calculate linear trend for",
                "type": "string"
              },
              "history_size": {
                "title": "History size",
                "description": "History len to use for linear approximation",
                "type": "integer"
              },
              "out_column": {
                "title": "Out column",
                "description": "Output column",
                "type": "string"
              }
            },
            "required": ["column", "history_size", "out_column"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CalculateLinearTrendSparse": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Calculates trend by given iloc positions",
        "properties": {
          "__instance__": {
            "const": "CalculateLinearTrendSparse"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "column": {
                "title": "Column",
                "description": "Column for linear trend calculation",
                "type": "string"
              },
              "prev_value_indexes": {
                "title": "Prev value indexes",
                "description": "Indexes of values to use in linear approximation",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "out_column": {
                "title": "Out column",
                "description": "Output columns name",
                "type": "string"
              }
            },
            "required": ["column", "prev_value_indexes", "out_column"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ChangeValuesByMask": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Performs columns mask",
        "properties": {
          "__instance__": {
            "const": "ChangeValuesByMask"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns that transformer influence on",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less\nthan this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CleanColumnValues": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Clearing data by values in columns",
        "properties": {
          "__instance__": {
            "const": "CleanColumnValues"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "clean_data": {
                "title": "Clean data",
                "description": "Conditions to exclude point from dataset",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              }
            },
            "required": ["clean_data"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ClipColumnWithUserInput": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Clip column by upper bound, lower bound or both",
        "properties": {
          "__instance__": {
            "const": "ClipColumnWithUserInput"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "input_column_name": {
                "title": "Input column name",
                "description": "Column to clip",
                "type": "string"
              },
              "output_column_name": {
                "title": "Output column name",
                "description": "Output column",
                "type": "string"
              },
              "lower_bound": {
                "title": "Lower bound",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "upper_bound": {
                "title": "Upper bound",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["input_column_name", "output_column_name"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ClipColumns": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Clip columns by upper, lower or both",
        "properties": {
          "__instance__": {
            "const": "ClipColumns"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to clip",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "lower": {
                "title": "Lower",
                "description": "Minimum threshold values",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "upper": {
                "title": "Upper",
                "description": "Maximum threshold values",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ColumnsDiff": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Calculate diff for specified columns",
        "properties": {
          "__instance__": {
            "const": "ColumnsDiff"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to calculate diff",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "periods": {
                "title": "Periods",
                "description": "Periods for diff, 1 by default",
                "type": "integer"
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans after diff calculation,\navailable methods: \"ffill\", \"bfill\", default is 0",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ColumnsSum": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Calculate columns sum",
        "properties": {
          "__instance__": {
            "const": "ColumnsSum"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to sum",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "output_name": {
                "title": "Output name",
                "description": "Output column name",
                "type": "string"
              }
            },
            "required": ["columns", "output_name"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CombineColumns": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "This transformer is deprecated. Use PandasEval instead.",
        "properties": {
          "__instance__": {
            "const": "CombineColumns"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "expressions": {
                "title": "Expressions",
                "description": "Sequence of tuples which contain two values\n(<expression to evaluate>, <expression result name>)",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "eval_engine": {
                "title": "Eval engine",
                "description": "Engine kwarg for pd.dataframe.eval method",
                "type": "string"
              },
              "output_cols": {
                "title": "Output cols",
                "description": "Columns to add in result dataframe",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["expressions"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "NumExpression": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Numexpr expression",
        "properties": {
          "__instance__": {
            "const": "NumExpression"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "out": {
                "title": "Out",
                "description": "Name of output",
                "type": "string"
              },
              "expression": {
                "title": "Expression",
                "description": "Symbolic expression",
                "type": "string"
              }
            },
            "required": ["out", "expression"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Condition": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Expression should return bool value, when it is True, then it is possible to use this controller.\nPriority value is an integer number, less value means higher priority of the controller.",
        "properties": {
          "__instance__": {
            "const": "Condition"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "controller_name": {
                "title": "Controller name",
                "description": "Controller tio use if condition is true",
                "type": "string"
              },
              "priority": {
                "title": "Priority",
                "description": "An integer number, less value means higher priority of the controller",
                "type": "integer"
              },
              "expression": {
                "title": "Expression",
                "description": "Serialized singleexpression",
                "$ref": "#/$defs/NumExpression"
              }
            },
            "required": [],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CreateFilterIdlesMask": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Create mask of idles according to predefined boundaries",
        "properties": {
          "__instance__": {
            "const": "CreateFilterIdlesMask"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "boundaries": {
                "title": "Boundaries",
                "description": "Specifies boundaries for idles detection\nit is list of tuples of (name, low, high, dilation)",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    {
                      "anyOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    {
                      "type": "integer"
                    }
                  ],
                  "minItems": 4,
                  "maxItems": 4
                }
              },
              "frozen_signals": {
                "title": "Frozen signals",
                "description": "Specifies hanging signals,\nit is list of tuples of (name, possible_len, dilation)",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "integer"
                        },
                        {
                          "type": "integer"
                        }
                      ],
                      "minItems": 3,
                      "maxItems": 3
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "mask_column_name": {
                "title": "Mask column name",
                "description": "Column for store idles mask, default name: \"__filter_mask\"",
                "type": "string"
              },
              "dilate_left_side": {
                "title": "Dilate left side",
                "description": "Dilate or not left side of bad intervals; false for inference",
                "type": "boolean"
              }
            },
            "required": ["boundaries"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CustomMinMaxScaler": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Scale and unscale columns to a given range",
        "properties": {
          "__instance__": {
            "const": "CustomMinMaxScaler"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to scale",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "feature_range": {
                "title": "Feature range",
                "description": "Range to scale",
                "type": "array",
                "items": [
                  {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  },
                  {
                    "anyOf": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                ],
                "minItems": 2,
                "maxItems": 2
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CustomRobustScaler": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Scale and unscale columns using statistics that are robust to outliers",
        "properties": {
          "__instance__": {
            "const": "CustomRobustScaler"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to scale",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "quantile_range": {
                "title": "Quantile range",
                "description": "Quantile range used to calculate sc_scale",
                "type": "array",
                "items": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "number"
                  }
                ],
                "minItems": 2,
                "maxItems": 2
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "CustomStandardScaler": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Scale and unscale columns with mean and std",
        "properties": {
          "__instance__": {
            "const": "CustomStandardScaler"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to scale",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DiffFilter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Fills values of some tag when another tag out of range",
        "properties": {
          "__instance__": {
            "const": "DiffFilter"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns that transformer influences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "params": {
                "title": "Params",
                "description": "Dictionary with tag names as keys and absolute difference threshold as values",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less than this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Used, when we used fill with rolling window, key is tag and value is window size",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns", "params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DoubleIrregularExpSmooth": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Double exponential smoothing for irregular data",
        "properties": {
          "__instance__": {
            "const": "DoubleIrregularExpSmooth"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "input_columns": {
                "title": "Input columns",
                "description": "List of input signal names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "alphas": {
                "title": "Alphas",
                "description": "List of algorithm forgetting factors corresponding to each input signal",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "k": {
                "title": "K",
                "description": "Prediction horizon",
                "type": "integer"
              },
              "initial_history": {
                "title": "Initial history",
                "description": "Number of points for initial state estimation",
                "type": "integer"
              },
              "sample_time": {
                "title": "Sample time",
                "description": "Sample time of input table in seconds",
                "type": "integer"
              }
            },
            "required": ["input_columns", "alphas"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DropAxisItemByValues": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Drop row &| column if value exists in any referred axis",
        "properties": {
          "__instance__": {
            "const": "DropAxisItemByValues"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "axis": {
                "title": "Axis",
                "description": "Axis to drop",
                "type": "integer"
              },
              "values": {
                "title": "Values",
                "description": "List of values to drop",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "integer"
                    }
                  ]
                }
              },
              "columns": {
                "title": "Columns",
                "description": "Columns to select from dataframe before calculating the conditions",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "how": {
                "title": "How",
                "description": "Temporary unavailable",
                "type": "string",
                "enum": ["any", "all"]
              }
            },
            "required": ["axis", "values"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DropRowsByMask": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Gets mask from condition trasfromer and drops rows using this mask",
        "properties": {
          "__instance__": {
            "const": "DropRowsByMask"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns that transformer influences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "params": {
                "title": "Params",
                "description": "In the dictionary, keys represent the tag names with values represented as a dict that contains:\n- dicts of key represent tag to check, value represents condition (a first element is \"less\"/\"greater\"/equal\",\nsecond is the value to compare with)",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              }
            },
            "required": ["columns", "params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "RangedFeature": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Feature with shifts",
        "properties": {
          "__instance__": {
            "const": "RangedFeature"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Column name",
                "type": "string"
              },
              "idxs": {
                "title": "Idxs",
                "description": "List of indexes to use for feature generation",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "idxs_range": {
                "title": "Idxs range",
                "description": "Range of indexes to use for feature generation",
                "anyOf": [
                  {
                    "type": "array",
                    "items": [
                      {
                        "type": "integer"
                      },
                      {
                        "type": "integer"
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 2
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "IdentityLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements identity function",
        "properties": {
          "__instance__": {
            "const": "IdentityLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "NegativeLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements negative function",
        "properties": {
          "__instance__": {
            "const": "NegativeLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "InverseLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements inverse function",
        "properties": {
          "__instance__": {
            "const": "InverseLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              },
              "bias": {
                "title": "Bias",
                "description": "Bias in denominator",
                "type": "integer"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "PowerLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements power function",
        "properties": {
          "__instance__": {
            "const": "PowerLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              },
              "power": {
                "title": "Power",
                "description": "Power",
                "type": "integer"
              }
            },
            "required": ["features", "final_use", "power"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SquareLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements square function",
        "properties": {
          "__instance__": {
            "const": "SquareLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "InteractionLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements interaction function",
        "properties": {
          "__instance__": {
            "const": "InteractionLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SumLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements sum function",
        "properties": {
          "__instance__": {
            "const": "SumLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MeanLibrary": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Library implements mean function",
        "properties": {
          "__instance__": {
            "const": "MeanLibrary"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "features": {
                "title": "Features",
                "description": "Rangedfeatures for use in library",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/RangedFeature"
                }
              },
              "final_use": {
                "title": "Final use",
                "description": "Use or not created features in final model",
                "type": "boolean"
              }
            },
            "required": ["features", "final_use"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "PyDeltaScore": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Implements a delta-score metric based on torchmetrics library",
        "properties": {
          "__instance__": {
            "const": "PyDeltaScore"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {},
            "required": [],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DummyBackboneParams": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Example of backbone_params",
        "properties": {
          "__instance__": {
            "const": "DummyBackboneParams"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "input_dim": {
                "title": "Input dim",
                "description": "Input size",
                "type": "integer"
              },
              "loss": {
                "title": "Loss",
                "description": "Loss function",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "loss_kwargs": {
                "title": "Loss kwargs",
                "description": "Loss function init kwargs",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "metric": {
                "title": "Metric",
                "description": "Metric function class path",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "metric_kwargs": {
                "title": "Metric kwargs",
                "description": "Metric class init kwargs",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "optimizer": {
                "title": "Optimizer",
                "description": "Optimizer class path",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "optimizer_kwargs": {
                "title": "Optimizer kwargs",
                "description": "Optimizer class init kwargs",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "scheduler": {
                "title": "Scheduler",
                "description": "Scheduler class path",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "scheduler_kwargs": {
                "title": "Scheduler kwargs",
                "description": "Scheduler class init kwargs",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["input_dim", "loss", "metric", "optimizer", "scheduler"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DummyController": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Controller that does nothing and return manipulated variables as is",
        "properties": {
          "__instance__": {
            "const": "DummyController"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "manipulated_vars": {
                "title": "Manipulated vars",
                "description": "Manipulated variables to return from get_control",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "title": "Name",
                "description": "Name of the controller, can be used to indentify controller in the logs",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["manipulated_vars"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DummyModelParams": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Example model parameters",
        "properties": {
          "__instance__": {
            "const": "DummyModelParams"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "val_size": {
                "title": "Val size",
                "description": "Size of validation part",
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "batch_size": {
                "title": "Batch size",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DummyScaler": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Do nothing with data",
        "properties": {
          "__instance__": {
            "const": "DummyScaler"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {},
            "required": [],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "DummyTorchModel": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Example of BaseTorchModel usage",
        "properties": {
          "__instance__": {
            "const": "DummyTorchModel"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "backbone_params": {
                "title": "Backbone params",
                "description": "Backbone parameters",
                "$ref": "#/$defs/DummyBackboneParams"
              },
              "features": {
                "title": "Features",
                "description": "List of features",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "targets": {
                "title": "Targets",
                "description": "List of targets",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "model_params": {
                "title": "Model params",
                "description": "Model parameters",
                "$ref": "#/$defs/DummyModelParams"
              },
              "trainer_kwargs": {
                "title": "Trainer kwargs",
                "description": "Kwargs for lightning trainer",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["backbone_params", "features", "targets", "model_params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ErrDiffFuzzy": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Fuzzy controller for working with error and diff antecedents",
        "properties": {
          "__instance__": {
            "const": "ErrDiffFuzzy"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "rules_container": {
                "title": "Rules container",
                "description": "Container with rules definition, in container row_antecedent should be error\nand col_antecedent should be delta between current and previous error",
                "$ref": "#/$defs/MatrixRulesContainer"
              },
              "antecedent_fuzzy_params": {
                "title": "Antecedent fuzzy params",
                "description": "Parameters for antecedent variables",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1AntecedentVariableConfig", "Type2AntecedentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1AntecedentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2AntecedentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "consequent_fuzzy_params": {
                "title": "Consequent fuzzy params",
                "description": "Parameters for consequent variables",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1ConsequentVariableConfig", "Type2ConsequentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1ConsequentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2ConsequentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "minuend_var_name": {
                "title": "Minuend var name",
                "description": "Minuend variable name, should present in input data",
                "type": "string"
              },
              "subtrahend_var_name": {
                "title": "Subtrahend var name",
                "description": "Subtrahend variable name, should present in input data",
                "type": "string"
              },
              "consequent_multiplier": {
                "title": "Consequent multiplier",
                "description": "Global consequent multiplier",
                "type": "number"
              },
              "reduction_alg": {
                "title": "Reduction alg",
                "description": "Type reduction algorithm using for type-2 inference\npossible reduction algorithms:\n- km (karnik - mendel algorithm)\n- ekm (enhanced karnik - mendel algorithm)\n- eiasc (enhanced iterative algorithm with stop condition)",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in logs",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "strict": {
                "title": "Strict",
                "description": "Boolean flag, if set to true controller throws an error if some antecedents lie outside the defined space,\notherwise increment of affected consequents will be equal 0",
                "type": "boolean"
              },
              "configuration_attempts": {
                "title": "Configuration attempts",
                "description": "Number of extra tries for failed configuration updates,\nlook `extra_attempts` of `basevariableconfigscontainer` for more information",
                "type": "integer"
              }
            },
            "required": [
              "rules_container",
              "antecedent_fuzzy_params",
              "consequent_fuzzy_params",
              "minuend_var_name",
              "subtrahend_var_name"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SinglePandasExpression": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Single pandas expression",
        "properties": {
          "__instance__": {
            "const": "SinglePandasExpression"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "out": {
                "title": "Out",
                "description": "Name of output",
                "type": "string"
              },
              "expression": {
                "title": "Expression",
                "description": "Symbolic expression",
                "type": "string"
              }
            },
            "required": ["out", "expression"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "VectorPandasExpression": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Vector pandas expression",
        "properties": {
          "__instance__": {
            "const": "VectorPandasExpression"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "out": {
                "title": "Out",
                "description": "Name of output",
                "type": "string"
              },
              "expression": {
                "title": "Expression",
                "description": "Symbolic expression",
                "type": "string"
              }
            },
            "required": ["out", "expression"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ExpressionsSequence": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Sequence of expressions",
        "properties": {
          "__instance__": {
            "const": "ExpressionsSequence"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "expr_type": {
                "title": "Expr type",
                "description": "Type of expression, available types: 'numexpr', 'pd_expr' and 'pd_expr_vec'.",
                "type": "string",
                "enum": ["num_expr", "pd_expr", "pd_expr_vec"]
              },
              "expressions": {
                "title": "Expressions",
                "description": "List of expressions to be evaluated,\nshould support dataframeexpression or dictexpression interfaces.",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "outputs": {
                "title": "Outputs",
                "description": "Names of the expression outputs that will be returned after evaluation,\nif not provided, returns all.",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "buffered": {
                "title": "Buffered",
                "description": "Keeps the output of each expression available for subsequent expressions, true by default.",
                "type": "boolean"
              },
              "toposort": {
                "title": "Toposort",
                "description": "If true, will sort 'numexpr' expressions in order of variable appearance.",
                "type": "boolean"
              },
              "get_last_method": {
                "title": "Get last method",
                "description": "Available values \"iloc\" or \"last_valid\", \"iloc\" by default. if set to \"iloc\",\nevaluates expression on the last row of the dataframe.\nif set to \"last_valid\", searches each column for the last non-nan value;\nthis is more time-consuming, use with caution.",
                "type": "string"
              },
              "strict": {
                "title": "Strict",
                "description": "Flag to define strict mode: if expression evaluation fails, we raise valueerror when strict is true.\nwhen strict is false we setup nan value in output.",
                "type": "boolean"
              }
            },
            "required": ["expr_type", "expressions"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Evaluator": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Evaluate list of BaseExpression",
        "properties": {
          "__instance__": {
            "const": "Evaluator"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "expressions": {
                "title": "Expressions",
                "description": "List of expressions to evaluate that support expression interface",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": [
                        "NumExpression",
                        "SinglePandasExpression",
                        "VectorPandasExpression",
                        "ExpressionsSequence"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "NumExpression"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/NumExpression"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SinglePandasExpression"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SinglePandasExpression"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "VectorPandasExpression"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/VectorPandasExpression"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ExpressionsSequence"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ExpressionsSequence"
                      }
                    }
                  ]
                }
              }
            },
            "required": ["expressions"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "FeedersSpSum": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Calculate feeders setpoints sum for controllers that transfer ore",
        "properties": {
          "__instance__": {
            "const": "FeedersSpSum"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "feeders_speed_actual": {
                "title": "Feeders speed actual",
                "description": "List of columns with actual feeders speed",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "feeders_speed_sp": {
                "title": "Feeders speed sp",
                "description": "List of columns with actual feeders speed set points",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "remote_control": {
                "title": "Remote control",
                "description": "List of columns with remote control flag value",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "auto_control": {
                "title": "Auto control",
                "description": "List of columns with auto control flag value",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "active_control": {
                "title": "Active control",
                "description": "List of columns with active control flag value",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "out_column": {
                "title": "Out column",
                "description": "Output column name",
                "type": "string"
              }
            },
            "required": [
              "feeders_speed_actual",
              "feeders_speed_sp",
              "remote_control",
              "auto_control",
              "active_control",
              "out_column"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "FillColumns": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Apply fill to specified columns",
        "properties": {
          "__instance__": {
            "const": "FillColumns"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to fill",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less than this value,\nwhen none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "FilterValuesByMask": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "can include all except True values or vise-versa",
        "properties": {
          "__instance__": {
            "const": "FilterValuesByMask"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "mask_column": {
                "title": "Mask column",
                "description": "Column with boolean mask",
                "type": "string"
              },
              "include": {
                "title": "Include",
                "description": "If true will choose all rows where mask is true, else vise-versa",
                "type": "boolean"
              }
            },
            "required": ["mask_column"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "FuzzyPID": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Adaptive PID controller with fuzzy gain scheduling",
        "properties": {
          "__instance__": {
            "const": "FuzzyPID"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "setpoint_name": {
                "title": "Setpoint name",
                "description": "Name of setpoint sensor in control input",
                "type": "string"
              },
              "input_name": {
                "title": "Input name",
                "description": "Name of system output sensor",
                "type": "string"
              },
              "control_output_name": {
                "title": "Control output name",
                "description": "Name of control variable",
                "type": "string"
              },
              "mode_flag": {
                "title": "Mode flag",
                "description": "Name of sensor with binary values shows automatic mode on/off",
                "type": "string"
              },
              "scheduler_antecedent_params": {
                "title": "Scheduler antecedent params",
                "description": "Temporary unavailable",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1AntecedentVariableConfig", "Type2AntecedentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1AntecedentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2AntecedentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "k_p_range": {
                "title": "K p range",
                "description": "Values range for proportional gain",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "k_d_range": {
                "title": "K d range",
                "description": "Values range for derivative gain",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "u_min": {
                "title": "U min",
                "description": "Lower control output boundary",
                "type": "number"
              },
              "u_max": {
                "title": "U max",
                "description": "Upper control output boundary",
                "type": "number"
              },
              "derivative_on_measurements": {
                "title": "Derivative on measurements",
                "description": "On/off derivative on measurements option",
                "type": "boolean"
              },
              "k_p": {
                "title": "K p",
                "description": "Proportional gain",
                "type": "integer"
              },
              "k_i": {
                "title": "K i",
                "description": "Integral gain",
                "type": "integer"
              },
              "k_d": {
                "title": "K d",
                "description": "Derivative gain",
                "type": "integer"
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "verbose": {
                "title": "Verbose",
                "description": "Flag to show logs",
                "type": "boolean"
              }
            },
            "required": [
              "setpoint_name",
              "input_name",
              "control_output_name",
              "mode_flag",
              "scheduler_antecedent_params",
              "k_p_range",
              "k_d_range",
              "u_min",
              "u_max",
              "derivative_on_measurements"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "FuzzyScheduler": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Fuzzy controller based gain scheduler",
        "properties": {
          "__instance__": {
            "const": "FuzzyScheduler"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "rules_container": {
                "title": "Rules container",
                "description": "Container with rules definition",
                "type": "object",
                "properties": {
                  "__instance__": {
                    "type": "string",
                    "enum": ["RulesContainer", "MatrixRulesContainer"]
                  }
                },
                "allOf": [
                  {
                    "if": {
                      "properties": {
                        "__instance__": {
                          "const": "RulesContainer"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/$defs/RulesContainer"
                    }
                  },
                  {
                    "if": {
                      "properties": {
                        "__instance__": {
                          "const": "MatrixRulesContainer"
                        }
                      }
                    },
                    "then": {
                      "$ref": "#/$defs/MatrixRulesContainer"
                    }
                  }
                ]
              },
              "antecedent_fuzzy_params": {
                "title": "Antecedent fuzzy params",
                "description": "Parameters for antecedent variables",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1AntecedentVariableConfig", "Type2AntecedentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1AntecedentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2AntecedentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2AntecedentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "consequent_fuzzy_params": {
                "title": "Consequent fuzzy params",
                "description": "Parameters for consequent variables",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": ["Type1ConsequentVariableConfig", "Type2ConsequentVariableConfig"]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type1ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type1ConsequentVariableConfig"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Type2ConsequentVariableConfig"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Type2ConsequentVariableConfig"
                      }
                    }
                  ]
                }
              },
              "consequent_multiplier": {
                "title": "Consequent multiplier",
                "description": "Global consequent multiplier",
                "type": "number"
              },
              "reduction_alg": {
                "title": "Reduction alg",
                "description": "Type reduction algorithm using for type-2 inference\npossible reduction algorithms:\n- km (karnik - mendel algorithm)\n- ekm (enhanced karnik - mendel algorithm)\n- eiasc (enhanced iterative algorithm with stop condition)",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in logs, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "verbose": {
                "title": "Verbose",
                "description": "Flag to show logs",
                "type": "boolean"
              },
              "n_rules_to_show": {
                "title": "N rules to show",
                "description": "Number of rules sorted by priority shown at each execution step (_get_rules_executed() method)",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "strict": {
                "title": "Strict",
                "description": "Boolean flag, if set to true controller throws an error if some antecedents lie outside the defined space,\notherwise increment of affected consequents will be equal 0",
                "type": "boolean"
              },
              "configuration_attempts": {
                "title": "Configuration attempts",
                "description": "Number of extra tries for failed configuration updates,\nlook `extra_attempts` of `basevariableconfigscontainer` for more information",
                "type": "integer"
              }
            },
            "required": ["rules_container", "antecedent_fuzzy_params", "consequent_fuzzy_params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "GradientController": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Base implementation of gradient controller.",
        "properties": {
          "__instance__": {
            "const": "GradientController"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "manipulated_vars": {
                "title": "Manipulated vars",
                "description": "List of manipulated variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "criterions": {
                "title": "Criterions",
                "description": "Dictionary when key is criterion name, value - list of expressions",
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/$defs/NumExpression"
                  }
                }
              },
              "initial_criterion": {
                "title": "Initial criterion",
                "description": "Criterion for cold start usage",
                "type": "string"
              },
              "step_bounds": {
                "title": "Step bounds",
                "description": "Abs bound for gradient steps. keys are names of manipulated_vars to clip",
                "type": "object",
                "additionalProperties": {
                  "type": "number"
                }
              },
              "grad_step_scale": {
                "title": "Grad step scale",
                "description": "Multiplier for control difference penalty in cost function",
                "type": "number"
              },
              "gradient_wrapper_name": {
                "title": "Gradient wrapper name",
                "description": "Gradient_wrapper model name in inference_storage",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "manipulated_vars",
              "criterions",
              "initial_criterion",
              "step_bounds",
              "grad_step_scale",
              "gradient_wrapper_name"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "GroupbyFilter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Make groupby filter for the specified tags that are keys in the params dictionary.",
        "properties": {
          "__instance__": {
            "const": "GroupbyFilter"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to transform",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "params": {
                "title": "Params",
                "description": "Dictionary with tag names as keys and groupby windows as values",
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              },
              "data_freq": {
                "title": "Data freq",
                "description": "Str, defaults to \"1min\": frequency of data, in timedelta format",
                "type": "string"
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less\nthan this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Used, when we used fill with rolling window, key is tag and value is window size",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns", "params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "InplaceRolling": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Performs inplace pandas rolling for specified columns with specified method",
        "properties": {
          "__instance__": {
            "const": "InplaceRolling"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "window_length": {
                "title": "Window length",
                "description": "Length of the window",
                "type": "integer"
              },
              "columns": {
                "title": "Columns",
                "description": "List of columns to apply rolling transformation.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                ]
              },
              "excluded_columns": {
                "title": "Excluded columns",
                "description": "Columns that should be excluded from transformation",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "agg_function": {
                "title": "Agg function",
                "description": "Aggregation function name, should be available for pandas rolling object. default is \"mean\"",
                "type": "string"
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less than this value,\nwhen none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "rolling_kwargs": {
                "title": "Rolling kwargs",
                "description": "Temporary unavailable",
                "type": "object",
                "additionalProperties": {}
              }
            },
            "required": ["window_length", "rolling_kwargs"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "IrregularBackboneParams": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Parameters to backbone",
        "properties": {
          "__instance__": {
            "const": "IrregularBackboneParams"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "c_in": {
                "title": "C in",
                "description": "Amount of features",
                "type": "integer"
              },
              "c_out": {
                "title": "C out",
                "description": "Amount of targets",
                "type": "integer"
              },
              "n_layers": {
                "title": "N layers",
                "description": "Amount of layers in gruplus",
                "type": "integer"
              },
              "hidden_size": {
                "title": "Hidden size",
                "description": "Size of layers in gruplus",
                "type": "integer"
              },
              "hidden_connection_size": {
                "title": "Hidden connection size",
                "description": "Size of dense layer to decode gruplus output",
                "type": "integer"
              },
              "loss": {
                "title": "Loss",
                "description": "Loss function class path",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "loss_kwargs": {
                "title": "Loss kwargs",
                "description": "Keyword arguments for loss function",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "metric": {
                "title": "Metric",
                "description": "Metric class path",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "metric_kwargs": {
                "title": "Metric kwargs",
                "description": "Keyword arguments for metric function",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "optimizer": {
                "title": "Optimizer",
                "description": "Optimizer class path to fit model",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "optimizer_kwargs": {
                "title": "Optimizer kwargs",
                "description": "Keyword arguments for optimizer",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "scheduler": {
                "title": "Scheduler",
                "description": "Scheduler class path",
                "type": "object",
                "properties": {
                  "__type__": {
                    "type": "string"
                  }
                },
                "required": ["__type__"]
              },
              "scheduler_kwargs": {
                "title": "Scheduler kwargs",
                "description": "Keyword arguments for scheduler",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "c_in",
              "c_out",
              "n_layers",
              "hidden_size",
              "hidden_connection_size",
              "loss",
              "metric",
              "optimizer",
              "scheduler"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "IrregularExpSmooth": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Exponential smoothing for irregular data",
        "properties": {
          "__instance__": {
            "const": "IrregularExpSmooth"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "input_columns": {
                "title": "Input columns",
                "description": "List of input signal names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "alphas": {
                "title": "Alphas",
                "description": "List of algorithm forgetting factors corresponding to each input signal",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "initial_history": {
                "title": "Initial history",
                "description": "Number of points for initial state estimation",
                "type": "integer"
              },
              "sample_time": {
                "title": "Sample time",
                "description": "Sample time of input table in seconds",
                "type": "integer"
              }
            },
            "required": ["input_columns", "alphas"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "IrregularModelParams": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Model params which doesn't refer to backbone directly",
        "properties": {
          "__instance__": {
            "const": "IrregularModelParams"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "val_size": {
                "title": "Val size",
                "description": "Size of validation part",
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "batch_size": {
                "title": "Batch size",
                "description": "Model batch size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "shuffle": {
                "title": "Shuffle",
                "description": "Shuffle flag",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "drop_last": {
                "title": "Drop last",
                "description": "Drop last flag",
                "anyOf": [
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "device": {
                "title": "Device",
                "description": "Device to use in torch",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "observable_periods": {
                "title": "Observable periods",
                "description": "List of valid periods",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "history_size": {
                "title": "History size",
                "description": "History size to use in pd.timedelta completable format",
                "type": "string"
              },
              "control_window": {
                "title": "Control window",
                "description": "Control window (into the future) in pd.timedelta completable format",
                "type": "string"
              },
              "update_period": {
                "title": "Update period",
                "description": "Period to get updates in pd.timedelta completable format",
                "type": "string"
              },
              "horizon_size": {
                "title": "Horizon size",
                "description": "Horizon size in pd.timedelta completable format",
                "type": "string"
              },
              "max_horizon": {
                "title": "Max horizon",
                "description": "Maximums horizon in pd.timedelta completable format",
                "type": "string"
              },
              "granularity": {
                "title": "Granularity",
                "description": "Data granularity in pd.timedelta completable format",
                "type": "string"
              },
              "key_column": {
                "title": "Key column",
                "description": "Key column name",
                "type": "string"
              },
              "scaler": {
                "title": "Scaler",
                "description": "Serialized customminmaxscaler",
                "$ref": "#/$defs/CustomMinMaxScaler"
              }
            },
            "required": [
              "observable_periods",
              "history_size",
              "control_window",
              "update_period",
              "horizon_size",
              "max_horizon",
              "granularity",
              "key_column",
              "scaler"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "IrregularRegressor": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "- sensors with non-regular changes\n- sensors with regular changes\n- control features\n- control setpoint features\nWe supposed that input timeseries has non-regular updates for some sensors in terms of granularity",
        "properties": {
          "__instance__": {
            "const": "IrregularRegressor"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "backbone_params": {
                "title": "Backbone params",
                "description": "Parameters which refers to nn architecture (backbone)",
                "$ref": "#/$defs/IrregularBackboneParams"
              },
              "nonregular_columns": {
                "title": "Nonregular columns",
                "description": "List of columns with non-regular updates",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "regular_columns": {
                "title": "Regular columns",
                "description": "List of columns with regular updates in terms of granularity",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "control_columns": {
                "title": "Control columns",
                "description": "List of columns with real values of parameters which we control",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "targets": {
                "title": "Targets",
                "description": "List of target columns",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "model_params": {
                "title": "Model params",
                "description": "Model parameters which doesn't include into backbone",
                "$ref": "#/$defs/IrregularModelParams"
              },
              "trainer_kwargs": {
                "title": "Trainer kwargs",
                "description": "Parameters for pytorch-lightning trainer. defaults to none.",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {}
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "control_sp_columns": {
                "title": "Control sp columns",
                "description": "List of columns with set points values of parameters which we control. defaults to none.",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "backbone_params",
              "nonregular_columns",
              "regular_columns",
              "control_columns",
              "targets",
              "model_params"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "LinearMPCWithMapping": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Implementation of sindy nonlinear mpc controller",
        "properties": {
          "__instance__": {
            "const": "LinearMPCWithMapping"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "do_mpc_params": {
                "title": "Do mpc params",
                "description": "Parameters of do-mpc controller like t_step, n_robust, n_horizon, etc.(see examples)",
                "type": "object",
                "additionalProperties": {}
              },
              "controlled_vars": {
                "title": "Controlled vars",
                "description": "List of controlled variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "manipulated_vars": {
                "title": "Manipulated vars",
                "description": "List of manipulated variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "optimal_mapping": {
                "title": "Optimal mapping",
                "description": "Mapping from controlled_vars to their optimal values",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "lb_bound_mapping": {
                "title": "Lb bound mapping",
                "description": "Mapping from names of lower bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "ub_bound_mapping": {
                "title": "Ub bound mapping",
                "description": "Mapping from names of upper bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "lb_delta_bound_mapping": {
                "title": "Lb delta bound mapping",
                "description": "Mapping from names of delta lower bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "ub_delta_bound_mapping": {
                "title": "Ub delta bound mapping",
                "description": "Mapping from names of delta upper bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "soft_lb_bound_mapping": {
                "title": "Soft lb bound mapping",
                "description": "Mapping from names of soft lower bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "soft_ub_bound_mapping": {
                "title": "Soft ub bound mapping",
                "description": "Mapping from names of soft upper bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "optimal_penalty": {
                "title": "Optimal penalty",
                "description": "Mapping from names of optimal values from signals to penalties",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "soft_bound_penalty": {
                "title": "Soft bound penalty",
                "description": "Mapping from names of soft upper bounds from signals to penalties",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "mv_delta_penalty": {
                "title": "Mv delta penalty",
                "description": "Dict of manipulated variables and multipliers for their difference penalty in cost function",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "discount": {
                "title": "Discount",
                "description": "Multiplier for long-term terms in cost function",
                "type": "number"
              },
              "use_bias": {
                "title": "Use bias",
                "description": "Use or not bias in casadi_next_step",
                "type": "boolean"
              },
              "inference_name": {
                "title": "Inference name",
                "description": "Inference_wrapper model name in inference_storage",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "reset_mpc_data": {
                "title": "Reset mpc data",
                "description": "If true will reset mpc history on each get_control call before making mpc step.\ndo not turn off in production, will cause memory leak in the long run.",
                "type": "boolean"
              }
            },
            "required": [
              "do_mpc_params",
              "controlled_vars",
              "manipulated_vars",
              "optimal_mapping",
              "lb_bound_mapping",
              "ub_bound_mapping",
              "lb_delta_bound_mapping",
              "ub_delta_bound_mapping",
              "soft_lb_bound_mapping",
              "soft_ub_bound_mapping",
              "optimal_penalty",
              "soft_bound_penalty",
              "mv_delta_penalty",
              "inference_name"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MakeShifts": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Performs columns shift",
        "properties": {
          "__instance__": {
            "const": "MakeShifts"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to make shifts",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "shifts": {
                "title": "Shifts",
                "description": "Sequence of shifts to make for each specified column",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "granularity": {
                "title": "Granularity",
                "description": "Initial granularity of data e.g: 1sec, 10sec, 1min",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less than this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns", "shifts"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MakeShiftsInRange": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Performs columns shift in specified range",
        "properties": {
          "__instance__": {
            "const": "MakeShiftsInRange"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns names",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "n_shifts": {
                "title": "N shifts",
                "description": "Number of shifts",
                "type": "integer"
              },
              "step": {
                "title": "Step",
                "description": "Distance between shifts",
                "type": "integer"
              },
              "granularity": {
                "title": "Granularity",
                "description": "Initial granularity of data e.g: 1sec, 10sec, 1min",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less than this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns", "n_shifts"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MakeShiftsInRangeV2": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Performs columns shift",
        "properties": {
          "__instance__": {
            "const": "MakeShiftsInRangeV2"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns_shifts_dict": {
                "title": "Columns shifts dict",
                "description": "Dict with columns names and shifts",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "step": {
                "title": "Step",
                "description": "Distance between shifts",
                "type": "integer"
              },
              "granularity": {
                "title": "Granularity",
                "description": "Initial granularity of data e.g: 1sec, 10sec, 1min",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less than this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "last_row_only": {
                "title": "Last row only",
                "description": "Create shifts only for last row",
                "type": "boolean"
              }
            },
            "required": ["columns_shifts_dict"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MultiWindowSINDyModel": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Implements multi-window SINDy model with delay",
        "properties": {
          "__instance__": {
            "const": "MultiWindowSINDyModel"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "windows": {
                "title": "Windows",
                "description": "Size of history for each separate model e.g: [50, 100, 500, 1000]",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "horizon": {
                "title": "Horizon",
                "description": "Model prediction step",
                "type": "integer"
              },
              "horizon_sim": {
                "title": "Horizon sim",
                "description": "How much ahead we will simulate the system to check quality of the predictions",
                "type": "integer"
              },
              "control_step": {
                "title": "Control step",
                "description": "Input sample rate",
                "type": "integer"
              },
              "eval_horizon": {
                "title": "Eval horizon",
                "description": "Test part size of input dataset",
                "type": "integer"
              },
              "exclude_connections": {
                "title": "Exclude connections",
                "description": "Pairs (name1, name2) of cv to exclude all connections between name1 and cv startswith name2",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "optimizer_type": {
                "title": "Optimizer type",
                "description": "Type of optimizer\npossible options: - constrainedsr3\n- stablelinearsr3",
                "type": "string"
              },
              "optimizer_kwargs": {
                "title": "Optimizer kwargs",
                "description": "Arguments for optimizer",
                "type": "object",
                "additionalProperties": {}
              },
              "cv_mv_delays": {
                "title": "Cv mv delays",
                "description": "Dictionary (name, delay_dict) of cv names\nand delay_dicts of delays between cv and mv",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              },
              "cv_columns": {
                "title": "Cv columns",
                "description": "List of cvs",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "mv_columns": {
                "title": "Mv columns",
                "description": "List of mvs",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "library_functions": {
                "title": "Library functions",
                "description": "List of libraries from sindy_libraries for use in model",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": [
                        "IdentityLibrary",
                        "NegativeLibrary",
                        "InverseLibrary",
                        "PowerLibrary",
                        "SquareLibrary",
                        "InteractionLibrary",
                        "SumLibrary",
                        "MeanLibrary"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "IdentityLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/IdentityLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "NegativeLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/NegativeLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "InverseLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/InverseLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "PowerLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/PowerLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SquareLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SquareLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "InteractionLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/InteractionLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SumLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SumLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MeanLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MeanLibrary"
                      }
                    }
                  ]
                }
              },
              "scaler_name": {
                "title": "Scaler name",
                "description": "Which scaler to use (dummy, standard, minmax, robust); default dummy",
                "type": "string"
              },
              "dv_columns": {
                "title": "Dv columns",
                "description": "List of dvs",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "scale_before_transform": {
                "title": "Scale before transform",
                "description": "Scale before transform or after",
                "type": "boolean"
              },
              "split_column": {
                "title": "Split column",
                "description": "Split data on continuous chunks based on this column",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "generate_shifts": {
                "title": "Generate shifts",
                "description": "Generate necessary shifts inside model with step granularity*control_step",
                "type": "boolean"
              },
              "granularity": {
                "title": "Granularity",
                "description": "Initial granularity of data e.g: 1sec, 10sec, 1min",
                "type": "string"
              },
              "inference_backend": {
                "title": "Inference backend",
                "description": "Backend for inference",
                "type": "string"
              }
            },
            "required": [
              "windows",
              "horizon",
              "horizon_sim",
              "control_step",
              "eval_horizon",
              "exclude_connections",
              "optimizer_type",
              "optimizer_kwargs",
              "cv_mv_delays",
              "cv_columns",
              "mv_columns",
              "library_functions"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "MultiWindowSINDyModelWithDelay": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Implements multi-window SINDy model with delay",
        "properties": {
          "__instance__": {
            "const": "MultiWindowSINDyModelWithDelay"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "windows": {
                "title": "Windows",
                "description": "Size of history for each separate model e.g: [50, 100, 500, 1000]",
                "type": "array",
                "items": {
                  "type": "integer"
                }
              },
              "horizon": {
                "title": "Horizon",
                "description": "Model prediction step",
                "type": "integer"
              },
              "horizon_sim": {
                "title": "Horizon sim",
                "description": "How much ahead we will simulate the system to check quality of the predictions",
                "type": "integer"
              },
              "control_step": {
                "title": "Control step",
                "description": "Input sample rate",
                "type": "integer"
              },
              "eval_horizon": {
                "title": "Eval horizon",
                "description": "Test part size of input dataset",
                "type": "integer"
              },
              "exclude_connections": {
                "title": "Exclude connections",
                "description": "Pairs (name1, name2) of cv to exclude all connections between name1 and cv startswith name2",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "optimizer_type": {
                "title": "Optimizer type",
                "description": "Type of optimizer",
                "type": "string"
              },
              "optimizer_kwargs": {
                "title": "Optimizer kwargs",
                "description": "Arguments for optimizer",
                "type": "object",
                "additionalProperties": {}
              },
              "cv_mv_delays": {
                "title": "Cv mv delays",
                "description": "Dictionary (name, delay_dict) of cv names\nand delay_dicts of delays between cv and mv",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer"
                  }
                }
              },
              "cv_columns": {
                "title": "Cv columns",
                "description": "List of cvs",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "mv_columns": {
                "title": "Mv columns",
                "description": "List of mvs",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "library_functions": {
                "title": "Library functions",
                "description": "List of libraries from sindy_libraries for use in model",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": [
                        "IdentityLibrary",
                        "NegativeLibrary",
                        "InverseLibrary",
                        "PowerLibrary",
                        "SquareLibrary",
                        "InteractionLibrary",
                        "SumLibrary",
                        "MeanLibrary"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "IdentityLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/IdentityLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "NegativeLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/NegativeLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "InverseLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/InverseLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "PowerLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/PowerLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SquareLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SquareLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "InteractionLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/InteractionLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SumLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SumLibrary"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MeanLibrary"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MeanLibrary"
                      }
                    }
                  ]
                }
              },
              "scaler_name": {
                "title": "Scaler name",
                "description": "Which scaler to use (dummy, standard, minmax, robust); default dummy",
                "type": "string"
              },
              "split_column": {
                "title": "Split column",
                "description": "Split data on continuous chunks based on this column",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "generate_shifts": {
                "title": "Generate shifts",
                "description": "Generate necessary shifts inside model with step granularity*control_step",
                "type": "boolean"
              },
              "granularity": {
                "title": "Granularity",
                "description": "Initial granularity of data e.g: 1sec, 10sec, 1min",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "inference_backend": {
                "title": "Inference backend",
                "description": "Backend for inference",
                "type": "string"
              }
            },
            "required": [
              "windows",
              "horizon",
              "horizon_sim",
              "control_step",
              "eval_horizon",
              "exclude_connections",
              "optimizer_type",
              "optimizer_kwargs",
              "cv_mv_delays",
              "cv_columns",
              "mv_columns",
              "library_functions"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "PIDController": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Classic PID controller",
        "properties": {
          "__instance__": {
            "const": "PIDController"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "setpoint_name": {
                "title": "Setpoint name",
                "description": "Name of setpoint sensor in control input",
                "type": "string"
              },
              "input_name": {
                "title": "Input name",
                "description": "Name of system output sensor",
                "type": "string"
              },
              "control_output_name": {
                "title": "Control output name",
                "description": "Name of control variable",
                "type": "string"
              },
              "mode_flag": {
                "title": "Mode flag",
                "description": "Name of sensor with binary values shows automatic mode on/off",
                "type": "string"
              },
              "k_p": {
                "title": "K p",
                "description": "Proportional gain",
                "type": "number"
              },
              "k_i": {
                "title": "K i",
                "description": "Integral gain",
                "type": "number"
              },
              "k_d": {
                "title": "K d",
                "description": "Derivative gain",
                "type": "number"
              },
              "u_min": {
                "title": "U min",
                "description": "Lower control output boundary",
                "type": "number"
              },
              "u_max": {
                "title": "U max",
                "description": "Upper control output boundary",
                "type": "number"
              },
              "derivative_on_measurements": {
                "title": "Derivative on measurements",
                "description": "On/off derivative on measurements option",
                "type": "boolean"
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "setpoint_name",
              "input_name",
              "control_output_name",
              "mode_flag",
              "k_p",
              "k_i",
              "k_d",
              "u_min",
              "u_max",
              "derivative_on_measurements"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "PandasEval": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Execute sequence of eval expressions for a given DataFrame.\nProvide functionality to evaluate expressions on pandas dataset with pd.DataFrame.eval",
        "properties": {
          "__instance__": {
            "const": "PandasEval"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "expressions": {
                "title": "Expressions",
                "description": "Sequence of tuples which contain two values\n(<expression result name>, <expression to evaluate>)",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "eval_engine": {
                "title": "Eval engine",
                "description": "Engine kwarg for pd.dataframe.eval method",
                "type": "string"
              },
              "output_cols": {
                "title": "Output cols",
                "description": "Columns to add in result dataframe",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["expressions"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "QuantileClip": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Clipping data based on quantiles",
        "properties": {
          "__instance__": {
            "const": "QuantileClip"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns to clip",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "min_q": {
                "title": "Min q",
                "description": "Lower limit for quantile clip",
                "type": "number"
              },
              "max_q": {
                "title": "Max q",
                "description": "Upper limit for quantile clip",
                "type": "number"
              }
            },
            "required": ["columns", "min_q", "max_q"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ThresholdLabel": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Label data by the threshold",
        "properties": {
          "__instance__": {
            "const": "ThresholdLabel"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "threshold": {
                "title": "Threshold",
                "description": "Label sample as 1 if value is above/below threshold depending direction",
                "type": "number"
              },
              "direction": {
                "title": "Direction",
                "description": "Lower or higher",
                "type": "string"
              }
            },
            "required": ["threshold"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "TrendLabel": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Label data by the sign of the last diff",
        "properties": {
          "__instance__": {
            "const": "TrendLabel"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "quantile": {
                "title": "Quantile",
                "description": "Label sample as 1 if absolute difference is greater than quantile",
                "type": "number"
              },
              "direction": {
                "title": "Direction",
                "description": "Increased or decreased",
                "type": "string"
              }
            },
            "required": ["quantile"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "RegexLabel": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "For each regex, create a label column for each listed transformer and each input column that matches the regex",
        "properties": {
          "__instance__": {
            "const": "RegexLabel"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "transformations": {
                "title": "Transformations",
                "description": "Mapping of regular expression and label transformations",
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "__instance__": {
                        "type": "string",
                        "enum": ["ThresholdLabel", "TrendLabel"]
                      }
                    },
                    "allOf": [
                      {
                        "if": {
                          "properties": {
                            "__instance__": {
                              "const": "ThresholdLabel"
                            }
                          }
                        },
                        "then": {
                          "$ref": "#/$defs/ThresholdLabel"
                        }
                      },
                      {
                        "if": {
                          "properties": {
                            "__instance__": {
                              "const": "TrendLabel"
                            }
                          }
                        },
                        "then": {
                          "$ref": "#/$defs/TrendLabel"
                        }
                      }
                    ]
                  }
                }
              }
            },
            "required": ["transformations"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ReplaceByCondition": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Fills values of some tag when another tag out of range",
        "properties": {
          "__instance__": {
            "const": "ReplaceByCondition"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "params": {
                "title": "Params",
                "description": "In the dictionary, keys represent the tag names with values represented as a dict that contains:\n- dicts of key represent tag to check, value represent condition (first element is \"less\"/\"greater\"/equal\",\nsecond is the value to compare with)",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 2
                  }
                }
              },
              "columns": {
                "title": "Columns",
                "description": "Columns that transformer influences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less\nthan this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Used, when we used fill with rolling window,\nkey is tag and value is window size",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["params", "columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ReplaceLinearInterpolations": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Fills linearly interpolated values which could be present in raw dataset",
        "properties": {
          "__instance__": {
            "const": "ReplaceLinearInterpolations"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "grad_threshold": {
                "title": "Grad threshold",
                "description": "Threshold for detecting linear interpolations",
                "type": "number"
              },
              "columns": {
                "title": "Columns",
                "description": "Columns that transformer influences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less\nthan this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Dict[str, str]: used, when we used fill with rolling window,\nkey is tag and value is window size",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["grad_threshold", "columns"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "ReplaceOutliers": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Replace outliers with nans based on zscore calculated for each tag",
        "properties": {
          "__instance__": {
            "const": "ReplaceOutliers"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "columns": {
                "title": "Columns",
                "description": "Columns that transformer influences",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "zscore": {
                "title": "Zscore",
                "description": "Threshold on zscore higher that which the value is\nconsidered an outlier",
                "type": "integer"
              },
              "fill_with": {
                "title": "Fill with",
                "description": "Method or value to fill nans, available methods: \"ffill\", \"bfill\"",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "number"
                  }
                ]
              },
              "max_fill_gap_size": {
                "title": "Max fill gap size",
                "description": "Fill only gaps in data that less\nthan this value, when none fill gaps regardless of their size",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fill_with_rolling_params": {
                "title": "Fill with rolling params",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["columns", "zscore"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SINDyDeltaMPC": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Base implementation of linear mpc controller",
        "properties": {
          "__instance__": {
            "const": "SINDyDeltaMPC"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "do_mpc_params": {
                "title": "Do mpc params",
                "description": "Parameters of do-mpc controller like t_step, n_robust, n_horizon, etc.(see examples)",
                "type": "object",
                "additionalProperties": {}
              },
              "controlled_vars": {
                "title": "Controlled vars",
                "description": "List of controlled variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "manipulated_vars": {
                "title": "Manipulated vars",
                "description": "List of manipulated variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "diff_step": {
                "title": "Diff step",
                "description": "Step of differentitation",
                "type": "integer"
              },
              "sp_mapping": {
                "title": "Sp mapping",
                "description": "Mapping from controlled_vars to their setpoints",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "bounds": {
                "title": "Bounds",
                "description": "Mapping from controlled_vars and manipulated_vars to their bounds",
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "control_delta_mult": {
                "title": "Control delta mult",
                "description": "Multiplier for control difference penalty in cost function",
                "type": "number"
              },
              "discount": {
                "title": "Discount",
                "description": "Multiplier for long-term terms in cost function",
                "type": "number"
              },
              "inference_name": {
                "title": "Inference name",
                "description": "Inference_wrapper model name in inference_storage",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "name": {
                "title": "Name",
                "description": "Temporary unavailable",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "do_mpc_params",
              "controlled_vars",
              "manipulated_vars",
              "diff_step",
              "sp_mapping",
              "bounds",
              "control_delta_mult",
              "inference_name"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SINDyMPC": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Implementation of sindy nonlinear mpc controller",
        "properties": {
          "__instance__": {
            "const": "SINDyMPC"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "do_mpc_params": {
                "title": "Do mpc params",
                "description": "Parameters of do-mpc controller like t_step, n_robust, n_horizon, etc.(see examples)",
                "type": "object",
                "additionalProperties": {}
              },
              "controlled_vars": {
                "title": "Controlled vars",
                "description": "List of controlled variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "manipulated_vars": {
                "title": "Manipulated vars",
                "description": "List of manipulated variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sp_mapping": {
                "title": "Sp mapping",
                "description": "Mapping from controlled_vars to their setpoints",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "bounds": {
                "title": "Bounds",
                "description": "Mapping from controlled_vars and manipulated_vars to their bounds",
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": [
                    {
                      "type": "number"
                    },
                    {
                      "type": "number"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "control_delta_mult": {
                "title": "Control delta mult",
                "description": "Multiplier for control difference penalty in cost function",
                "type": "number"
              },
              "discount": {
                "title": "Discount",
                "description": "Multiplier for long-term terms in cost function",
                "type": "number"
              },
              "inference_name": {
                "title": "Inference name",
                "description": "Inference_wrapper model name in inference_storage",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": [
              "do_mpc_params",
              "controlled_vars",
              "manipulated_vars",
              "sp_mapping",
              "bounds",
              "control_delta_mult",
              "inference_name"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SINDyMPCwithMapping": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Implementation of sindy nonlinear mpc controller",
        "properties": {
          "__instance__": {
            "const": "SINDyMPCwithMapping"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "do_mpc_params": {
                "title": "Do mpc params",
                "description": "Parameters of do-mpc controller like t_step, n_robust, n_horizon, etc.(see examples)",
                "type": "object",
                "additionalProperties": {}
              },
              "controlled_vars": {
                "title": "Controlled vars",
                "description": "List of controlled variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "manipulated_vars": {
                "title": "Manipulated vars",
                "description": "List of manipulated variables",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "optimal_mapping": {
                "title": "Optimal mapping",
                "description": "Mapping from controlled_vars to their optimal values",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "lb_bound_mapping": {
                "title": "Lb bound mapping",
                "description": "Mapping from names of lower bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "ub_bound_mapping": {
                "title": "Ub bound mapping",
                "description": "Mapping from names of upper bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "lb_delta_bound_mapping": {
                "title": "Lb delta bound mapping",
                "description": "Mapping from names of delta lower bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "ub_delta_bound_mapping": {
                "title": "Ub delta bound mapping",
                "description": "Mapping from names of delta upper bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "soft_lb_bound_mapping": {
                "title": "Soft lb bound mapping",
                "description": "Mapping from names of soft lower bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "soft_ub_bound_mapping": {
                "title": "Soft ub bound mapping",
                "description": "Mapping from names of soft upper bounds from signals to state names",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "optimal_penalty": {
                "title": "Optimal penalty",
                "description": "Mapping from names of optimal values from signals to penalties",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "soft_bound_penalty": {
                "title": "Soft bound penalty",
                "description": "Mapping from names of soft upper bounds from signals to penalties",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "mv_delta_penalty": {
                "title": "Mv delta penalty",
                "description": "Dict of manipulated variables and multipliers for their difference penalty in cost function",
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              },
              "discount": {
                "title": "Discount",
                "description": "Multiplier for long-term terms in cost function",
                "type": "number"
              },
              "use_bias": {
                "title": "Use bias",
                "description": "Use or not bias in casadi_next_step",
                "type": "boolean"
              },
              "inference_name": {
                "title": "Inference name",
                "description": "Inference_wrapper model name in inference_storage",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "reset_mpc_data": {
                "title": "Reset mpc data",
                "description": "If true will reset mpc history on each get_control call before making mpc step.\ndo not turn off in production, will cause memory leak in the long run.",
                "type": "boolean"
              }
            },
            "required": [
              "do_mpc_params",
              "controlled_vars",
              "manipulated_vars",
              "optimal_mapping",
              "lb_bound_mapping",
              "ub_bound_mapping",
              "lb_delta_bound_mapping",
              "ub_delta_bound_mapping",
              "soft_lb_bound_mapping",
              "soft_ub_bound_mapping",
              "optimal_penalty",
              "soft_bound_penalty",
              "mv_delta_penalty",
              "inference_name"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Thinner": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Take each step value, starting from the end. Reverse array to keep it in right order",
        "properties": {
          "__instance__": {
            "const": "Thinner"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "step": {
                "title": "Step",
                "description": "Step with which dataframe will be sliced",
                "type": "integer"
              }
            },
            "required": ["step"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "UpdateDetector": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Transformer which create a binary column to detect sensor update and column with next update time",
        "properties": {
          "__instance__": {
            "const": "UpdateDetector"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "key_column": {
                "title": "Key column",
                "description": "Target column for sampling",
                "type": "string"
              },
              "sampling_interval": {
                "title": "Sampling interval",
                "description": "Interval between samples if per minute sampling else \"unique\" sensor point, defaults to \"unique\"",
                "anyOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "required": ["key_column"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "StorageBufferLevelCleaning": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "(Mainly in percents of maximum possible height, but other measures also can be used)\nThis is the class for detection incorrect values in this level signal.",
        "properties": {
          "__instance__": {
            "const": "StorageBufferLevelCleaning"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "level_tags": {
                "title": "Level tags",
                "description": "Tags with level signal",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "cleaning_params": {
                "title": "Cleaning params",
                "description": "Dict[name_of_function_to_call, dict[level_tag, dict[name_of_parameter, parameter_value]]], keys indicates which functions\nshould be used for cleaning\n\n- \"out_bounds\" - detect indexes when level has out of bounds values.\nkeys \"min\" and \"max\"\n\n- \"outlier_pieces\" - detect indexes when abs diff is too big (more than \"max_normal_diff\" parameter) and\nindexes between this sharp changes, if len of them is less than \"number_good_in_row_to_stop\" parameter\nkeys:\n    max_normal_diff: int (defaults to 3)\n    number_good_in_row_to_stop: int (defaults to 15)\n\n- \"incorrect_pieces_between_outlier_pieces\" - sometimes there are incorrect pieces looking like arch:\n    outlier piece directed upward,\n    a signal that seems normal, then outlier piece directed downward.\n    in reality the signal that seemed normal is also incorrect.\n    same for the inverted situation.\n    this function detects this indexes. function can be used only for signals for which outlier_pieces was used.",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {}
                  }
                }
              },
              "interpolate_bad_pieces": {
                "title": "Interpolate bad pieces",
                "description": "Make linear interpolations instead of incorrect indexes",
                "type": "boolean"
              },
              "mark_incorrect_inds": {
                "title": "Mark incorrect inds",
                "description": "Creates columns with flagged incorrect indexes when they are going in row >= mark_incorrect_inds\nall incorrect indexes on the edge are marked even if a number of them is less than\nthreshold_mark_incorrect_inds that columns then used storagebuffer model to indicate if model\ncan trust this level value",
                "type": "boolean"
              },
              "threshold_mark_incorrect_inds": {
                "title": "Threshold mark incorrect inds",
                "description": "Threshold for number of incorrect indexes",
                "type": "integer"
              }
            },
            "required": ["level_tags", "cleaning_params"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "TableFunction1D": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Function based on 1d interpolation between data points",
        "properties": {
          "__instance__": {
            "const": "TableFunction1D"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "argument_name": {
                "title": "Argument name",
                "description": "Input sensor name which is an argument for table function",
                "type": "string"
              },
              "function_name": {
                "title": "Function name",
                "description": "Calculated sensor name",
                "type": "string"
              },
              "argument_points": {
                "title": "Argument points",
                "description": "Argument points",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "function_points": {
                "title": "Function points",
                "description": "Table function values corresponding to argument points",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "kind": {
                "title": "Kind",
                "description": "Kind of interpolation, default \"linear\". all options:\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html",
                "type": "string"
              }
            },
            "required": ["argument_name", "function_name", "argument_points", "function_points"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "TableFunction2D": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Function based on 2d interpolation between data points",
        "properties": {
          "__instance__": {
            "const": "TableFunction2D"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "first_argument_name": {
                "title": "First argument name",
                "description": "Input sensor name which is an 1st argument for table function",
                "type": "string"
              },
              "second_argument_name": {
                "title": "Second argument name",
                "description": "Input sensor name which is an 2nd argument for table function",
                "type": "string"
              },
              "function_name": {
                "title": "Function name",
                "description": "Calculated sensor name",
                "type": "string"
              },
              "first_argument_points": {
                "title": "First argument points",
                "description": "1st argument points",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "second_argument_points": {
                "title": "Second argument points",
                "description": "2nd argument points",
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "function_points": {
                "title": "Function points",
                "description": "Table function values matrix corresponding to argument points",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              },
              "kind": {
                "title": "Kind",
                "description": "Kind of interpolation, default \"linear\". all options:\nhttps://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.regulargridinterpolator.html",
                "type": "string"
              }
            },
            "required": [
              "first_argument_name",
              "second_argument_name",
              "function_name",
              "first_argument_points",
              "second_argument_points",
              "function_points"
            ],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SequentialPipeline": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "Wrapper for sklearn Pipeline to make it easily serializable",
        "properties": {
          "__instance__": {
            "const": "SequentialPipeline"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "steps": {
                "title": "Steps",
                "description": "List of transformers to apply",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": [
                        "CleanColumnValues",
                        "ClipColumnWithUserInput",
                        "ClipColumns",
                        "PandasEval",
                        "CombineColumns",
                        "ColumnsDiff",
                        "ColumnsSum",
                        "FeedersSpSum",
                        "DropAxisItemByValues",
                        "FillColumns",
                        "CreateFilterIdlesMask",
                        "InplaceRolling",
                        "CalculateLinearTrend",
                        "CalculateLinearTrendSparse",
                        "MakeShifts",
                        "MakeShiftsInRange",
                        "MakeShiftsInRangeV2",
                        "CustomMinMaxScaler",
                        "QuantileClip",
                        "CustomStandardScaler",
                        "Thinner",
                        "DummyScaler",
                        "CustomRobustScaler",
                        "ButterworthFilter",
                        "ChangeValuesByMask",
                        "ReplaceOutliers",
                        "ReplaceLinearInterpolations",
                        "ReplaceByCondition",
                        "DiffFilter",
                        "IrregularExpSmooth",
                        "DoubleIrregularExpSmooth",
                        "DropRowsByMask",
                        "FilterValuesByMask",
                        "GroupbyFilter",
                        "UpdateDetector",
                        "ThresholdLabel",
                        "TrendLabel",
                        "RegexLabel",
                        "StorageBufferLevelCleaning",
                        "TableFunction1D",
                        "TableFunction2D"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CleanColumnValues"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CleanColumnValues"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ClipColumnWithUserInput"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ClipColumnWithUserInput"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ClipColumns"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ClipColumns"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "PandasEval"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/PandasEval"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CombineColumns"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CombineColumns"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ColumnsDiff"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ColumnsDiff"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ColumnsSum"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ColumnsSum"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "FeedersSpSum"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/FeedersSpSum"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "DropAxisItemByValues"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/DropAxisItemByValues"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "FillColumns"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/FillColumns"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CreateFilterIdlesMask"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CreateFilterIdlesMask"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "InplaceRolling"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/InplaceRolling"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CalculateLinearTrend"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CalculateLinearTrend"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CalculateLinearTrendSparse"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CalculateLinearTrendSparse"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MakeShifts"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MakeShifts"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MakeShiftsInRange"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MakeShiftsInRange"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "MakeShiftsInRangeV2"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/MakeShiftsInRangeV2"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CustomMinMaxScaler"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CustomMinMaxScaler"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "QuantileClip"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/QuantileClip"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CustomStandardScaler"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CustomStandardScaler"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "Thinner"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/Thinner"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "DummyScaler"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/DummyScaler"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "CustomRobustScaler"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/CustomRobustScaler"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ButterworthFilter"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ButterworthFilter"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ChangeValuesByMask"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ChangeValuesByMask"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ReplaceOutliers"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ReplaceOutliers"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ReplaceLinearInterpolations"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ReplaceLinearInterpolations"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ReplaceByCondition"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ReplaceByCondition"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "DiffFilter"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/DiffFilter"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "IrregularExpSmooth"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/IrregularExpSmooth"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "DoubleIrregularExpSmooth"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/DoubleIrregularExpSmooth"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "DropRowsByMask"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/DropRowsByMask"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "FilterValuesByMask"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/FilterValuesByMask"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "GroupbyFilter"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/GroupbyFilter"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "UpdateDetector"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/UpdateDetector"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ThresholdLabel"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ThresholdLabel"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "TrendLabel"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/TrendLabel"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "RegexLabel"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/RegexLabel"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "StorageBufferLevelCleaning"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/StorageBufferLevelCleaning"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "TableFunction1D"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/TableFunction1D"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "TableFunction2D"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/TableFunction2D"
                      }
                    }
                  ]
                }
              }
            },
            "required": ["steps"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "SwitchController": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "and controller priority. If all conditions are False then SwitchController will use specified default controller.",
        "properties": {
          "__instance__": {
            "const": "SwitchController"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "controllers": {
                "title": "Controllers",
                "description": "Dict where key is controller name (should match name of exactly one condition)\nand values are children of basecontroller",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "__instance__": {
                      "type": "string",
                      "enum": [
                        "BaseFuzzyController",
                        "FuzzyScheduler",
                        "ErrDiffFuzzy",
                        "PIDController",
                        "FuzzyPID",
                        "DummyController",
                        "GradientController",
                        "SINDyMPC",
                        "SINDyDeltaMPC",
                        "SwitchController",
                        "LinearMPCWithMapping",
                        "SINDyMPCwithMapping"
                      ]
                    }
                  },
                  "allOf": [
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "BaseFuzzyController"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/BaseFuzzyController"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "FuzzyScheduler"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/FuzzyScheduler"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "ErrDiffFuzzy"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/ErrDiffFuzzy"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "PIDController"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/PIDController"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "FuzzyPID"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/FuzzyPID"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "DummyController"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/DummyController"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "GradientController"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/GradientController"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SINDyMPC"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SINDyMPC"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SINDyDeltaMPC"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SINDyDeltaMPC"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SwitchController"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SwitchController"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "LinearMPCWithMapping"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/LinearMPCWithMapping"
                      }
                    },
                    {
                      "if": {
                        "properties": {
                          "__instance__": {
                            "const": "SINDyMPCwithMapping"
                          }
                        }
                      },
                      "then": {
                        "$ref": "#/$defs/SINDyMPCwithMapping"
                      }
                    }
                  ]
                }
              },
              "conditions": {
                "title": "Conditions",
                "description": "List of conditions, specifies which controller should be executed at particular time",
                "type": "array",
                "items": {
                  "$ref": "#/$defs/Condition"
                }
              },
              "default_controller": {
                "title": "Default controller",
                "description": "Default controller name, this controller will be used if all conditions is false",
                "type": "string"
              },
              "name": {
                "title": "Name",
                "description": "Controller name, could be used to determine controller of the same class in log, class name by default",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["controllers", "conditions", "default_controller"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      },
      "Type2AdvancedReferencePoint": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "description": "User define by himself the whole update logic.",
        "properties": {
          "__instance__": {
            "const": "Type2AdvancedReferencePoint"
          },
          "params": {
            "title": "Parameters of object",
            "description": "All parameters that needed to init an object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Name of reference point, update is fetched by this name. example: \"feedrate_low\"",
                "type": "string"
              },
              "reference_point": {
                "title": "Reference point",
                "description": "Expression for reference point calculation. the computed value can be accessed\nfor expressions using the reference_point identifier. the postfixes -lower and -upper\nare used for upper and lower membership function parameters respectively.\n       example: \"(low-b-upper + low-c-upper)/2\"",
                "type": "string"
              },
              "updates": {
                "title": "Updates",
                "description": "List of update expressions.\nexample: [(\"low-a-lower\", \"low-a-lower + shift\"), ...]",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "minItems": 2,
                  "maxItems": 2
                }
              },
              "variables": {
                "title": "Variables",
                "description": "List of variables used in expressions and validations\nexample: [(\"shift\", \"feedrate_low - reference_point\"),\n(\"max_value\", \"feedrate-high-a - 10\"), ...]",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "minItems": 2,
                      "maxItems": 2
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "validations": {
                "title": "Validations",
                "description": "List of validations.\nexample: [(\"feedrate_low<max_value\", \"feedrate_low should be less {max_value}\"), ...]",
                "anyOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "array",
                      "items": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "minItems": 2,
                      "maxItems": 2
                    }
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "label": {
                "title": "Label",
                "description": "This name will be used in update response message in case of invalid update.",
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "required": ["name", "reference_point", "updates"],
            "additionalProperties": true
          }
        },
        "required": ["__instance__", "params"]
      }
    }
  },
  "nodes_lib": {
    "name": "root",
    "children": [
      {
        "name": "Compute",
        "children": [
          {
            "name": "MDK",
            "children": [],
            "items": [
              {
                "name": "mdk_fuzzy_controller",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_fuzzy_controller",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "typing.Union[platform_mdk.controllers.fuzzy.base.BaseFuzzyController, platform_mdk.controllers.fuzzy.err_diff_fuzzy.ErrDiffFuzzy]",
                      "description": "Controller object",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_switch_controller",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_switch_controller",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "SwitchController",
                      "description": "Controller object",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_fuzzy_input_validation",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_fuzzy_input_validation",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "BaseFuzzyController",
                      "description": "The fuzzy controller used for user input validation.",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The input dataframe containing user inputs to validate.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "A tuple containing the validated dataframe, reset user input dataset, and dataframe containing any error logs.",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "A tuple containing the validated dataframe, reset user input dataset, and dataframe containing any error logs.",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "A tuple containing the validated dataframe, reset user input dataset, and dataframe containing any error logs.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_fuzzy_mfunction_expression",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_fuzzy_mfunction_expression",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "typing.Union[platform_mdk.controllers.fuzzy.base.BaseFuzzyController, platform_mdk.controllers.fuzzy.err_diff_fuzzy.ErrDiffFuzzy]",
                      "description": "The fuzzy controller on which to evaluate the expressions.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "typing.Dict[str, float]",
                      "description": "A dictionary with keys as expression names and values as the results of the evaluated expressions.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_fuzzy_pid_controller",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_fuzzy_pid_controller",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "FuzzyPID",
                      "description": "Controller object",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_sindy_mpc",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_sindy_mpc",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "InferenceWrapper",
                      "description": "Inference wrapper for sindympc",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "typing.Union[platform_mdk.controllers.mpc.sindy.SINDyMPC, platform_mdk.controllers.mpc.sindy_delta.SINDyDeltaMPC]",
                      "description": "Controller object",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_controller_execute",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_controller_execute",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "BaseController",
                      "description": "A controller object used to calculate the control actions.",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "A pandas dataframe containing the input data.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Controls or control deltas dataframe, control status and control success flag",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Controls or control deltas dataframe, control status and control success flag",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Controls or control deltas dataframe, control status and control success flag",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_controller_configure",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_controller_configure",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "BaseController",
                      "description": "Controller to configure",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Dataframe with configuration values",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "BaseController",
                      "description": "Reconfigured controller, configuration status",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Reconfigured controller, configuration status",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Reconfigured controller, configuration status",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_trainer",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_trainer",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The input data to process and fit the model on.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "NamedArtifact",
                      "description": "An object containing the name of the output artifact and the payload,\nwhich includes the preprocessed model and additional metadata.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_make_inference",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_make_inference",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "InferenceWrapper",
                      "description": "The inferencewrapper instance to use for performing inference.",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The input data on which to perform inference.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The result of the inference with columns renamed according to the inferencewrapper's\ntargets and the internal rename mapping.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_expressions_evaluator",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_expressions_evaluator",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Controlinput object with data required to evaluate expressions",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Single row dataframe with expressions results",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "mdk_sequential_pipeline",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/mdk_sequential_pipeline",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Data to be transformed",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Data after transformations applied",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              }
            ]
          },
          {
            "name": "Domain",
            "children": [],
            "items": [
              {
                "name": "feeders_sp_processor",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/feeders_sp_processor",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Dataframe with feeders summary set point",
                      "node_parameter": null,
                      "parameter_default": null
                    },
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Data that was used to calculate control value",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Dataframe with control value for each feeder, also could contain new values for multipliers\nthey reset to equal proportions when any of the feeders goes up or down",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              }
            ]
          }
        ],
        "items": []
      },
      {
        "name": "Input/Output",
        "children": [
          {
            "name": "Platform",
            "children": [],
            "items": [
              {
                "name": "platform_write",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_write",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The input data containing signals to be written.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": []
                },
                "description": ""
              },
              {
                "name": "platform_write_blob",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_write_blob",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The input data containing signals to be processed and written.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": []
                },
                "description": ""
              },
              {
                "name": "platform_write_last",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_write_last",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Dataframe with needed signals",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": []
                },
                "description": ""
              },
              {
                "name": "platform_read_realtime",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_read_realtime",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The dataframe containing the read signals.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_read_latest",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_read_latest",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "A dataframe with the latest signal values, indexed by the latest timestamp.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_read_blob_realtime",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_read_blob_realtime",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "The dataframe containing the raw blob data read from the specified signals.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_subscription",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_subscription",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Last snapshot of data from subscribe_aperiodic generator",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_raw_subscription",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_raw_subscription",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "DataFrame",
                      "description": "Last snapshot of data from subscribe_aperiodic generator",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_get_artifact",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_get_artifact",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "bytes",
                      "description": "Downloaded artifact",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_get_latest_artifact",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_get_latest_artifact",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "fixed",
                      "type": "bytes",
                      "description": "Artifact bytes",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_get_inference_wrapper",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_get_inference_wrapper",
                "sockets": {
                  "inputs": [],
                  "outputs": [
                    {
                      "quantity": "variable",
                      "type": "InferenceWrapper",
                      "description": "N outputs with inference wrappers in order they specified on init",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ]
                },
                "description": ""
              },
              {
                "name": "platform_upload_artifacts",
                "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/platform_upload_artifacts",
                "sockets": {
                  "inputs": [
                    {
                      "quantity": "variable",
                      "type": "NamedArtifact",
                      "description": "Variable length argument list of namedartifact objects to be uploaded.",
                      "node_parameter": null,
                      "parameter_default": null
                    }
                  ],
                  "outputs": []
                },
                "description": ""
              }
            ]
          }
        ],
        "items": []
      },
      {
        "name": "Data Utils",
        "children": [],
        "items": [
          {
            "name": "df_rename",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_rename",
            "sockets": {
              "inputs": [
                {
                  "quantity": "variable",
                  "type": "DataFrame",
                  "description": "Objects to which rename will be applied",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "variable",
                  "type": "DataFrame",
                  "description": "N outputs with renamed data. n is the same as number of inputs",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "df_clip_data",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_clip_data",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Dataframe to clip values",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "variable",
                  "type": "typing.Union[pandas.core.frame.DataFrame, typing.Dict[str, float]]",
                  "description": "Inputs to search for clip values from configuration",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Dataframe with clipped values",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "df_update",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_update",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Dataframe object to attach data",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "variable",
                  "type": "typing.Union[pandas.core.frame.DataFrame, typing.Dict[str, float]]",
                  "description": "Collection of dataframes to update original one",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Updated dataframe object",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "df_merge",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_merge",
            "sockets": {
              "inputs": [
                {
                  "quantity": "variable",
                  "type": "DataFrame",
                  "description": "Dataframes to merge",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Merged dataframe",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "df_to_named_artifact",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_to_named_artifact",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "The dataframe to serialize.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "NamedArtifact",
                  "description": "A namedartifact object containing the artifact name and the serialized dataframe payload.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "df_control_selection",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_control_selection",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A pandas dataframe containing control data.",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A pandas dataframe containing flags data.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A pandas dataframe containing only the selected set points data.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "df_clip_control_with_step_limits",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/df_clip_control_with_step_limits",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "New control values",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Dataframe to clip values",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "Dataframe with clipped values",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "name": "Flow Control",
        "children": [],
        "items": [
          {
            "name": "branching_split",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/branching_split",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "Selected branch index",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "fixed",
                  "type": "PropagateType",
                  "description": "Anything that would be passed downstream",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "variable",
                  "type": "PropagateType",
                  "description": "Tuple where output with branch_index equal input and other outputs are empty_object instances",
                  "node_parameter": "n_branches",
                  "parameter_default": 2
                }
              ]
            },
            "description": ""
          },
          {
            "name": "branching_condition",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/branching_condition",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "The dataframe to evaluate against the conditions.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "The branch number that corresponds to the first condition that evaluates to true.\nif no conditions are met, returns the default branch number if specified,\notherwise raises a valueerror.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "branching_binary_condition",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/branching_binary_condition",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "The dataframe to evaluate the condition on.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "The branch number, either 0 or 1, based on the evaluation of the condition.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "branching_merge",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/branching_merge",
            "sockets": {
              "inputs": [
                {
                  "quantity": "variable",
                  "type": "PropagateType",
                  "description": "Inputs from all branches",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "PropagateType",
                  "description": "Input only from executed branch",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "branching_choose_one",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/branching_choose_one",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "The index that determines which option to return.",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "variable",
                  "type": "PropagateType",
                  "description": "The inputs to choose from.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "PropagateType",
                  "description": "The value of the input at the specified index.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          }
        ]
      },
      {
        "name": "Debug",
        "children": [],
        "items": [
          {
            "name": "_random_int",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_random_int",
            "sockets": {
              "inputs": [],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "A random integer between 'a' and 'b'.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "_echo",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_echo",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "typing.Any",
                  "description": "The data to be saved to the buffer.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": []
            },
            "description": ""
          },
          {
            "name": "_operator",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_operator",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "The first operand for the operator function.",
                  "node_parameter": null,
                  "parameter_default": null
                },
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "The second operand for the operator function.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "int",
                  "description": "The result of the operator function applied to the operands.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "_periodic_read",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_periodic_read",
            "sockets": {
              "inputs": [],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A dataframe containing the next batch of data.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "_periodic_write",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_periodic_write",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A pandas dataframe representing the data to be written to the file.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": []
            },
            "description": ""
          },
          {
            "name": "_periodic_write_last",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_periodic_write_last",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A pandas dataframe representing the data to be written to the file.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": []
            },
            "description": ""
          },
          {
            "name": "_inference_wrapper_mock",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_inference_wrapper_mock",
            "sockets": {
              "inputs": [],
              "outputs": [
                {
                  "quantity": "variable",
                  "type": "InferenceWrapper",
                  "description": "A list of deserialized inference objects.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          },
          {
            "name": "_write_artifact",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/_write_artifact",
            "sockets": {
              "inputs": [
                {
                  "quantity": "variable",
                  "type": "NamedArtifact",
                  "description": "Variable length argument list of namedartifact objects to be written to files.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": []
            },
            "description": ""
          },
          {
            "name": "examples_console_log",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/examples_console_log",
            "sockets": {
              "inputs": [
                {
                  "quantity": "fixed",
                  "type": "typing.Any",
                  "description": "Variable length argument list of inputs to log.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ],
              "outputs": []
            },
            "description": ""
          },
          {
            "name": "examples_range_dataframe",
            "schema_path": "#/graph_def_file_schema/$defs/pplfw_nodes/examples_range_dataframe",
            "sockets": {
              "inputs": [],
              "outputs": [
                {
                  "quantity": "fixed",
                  "type": "DataFrame",
                  "description": "A dataframe with a range of integers and a date range index.",
                  "node_parameter": null,
                  "parameter_default": null
                }
              ]
            },
            "description": ""
          }
        ]
      }
    ],
    "items": []
  },
  "sockets_types": [
    {
      "name": "DataFrame",
      "description": "",
      "group": "Data",
      "base_type": null
    },
    {
      "name": "NamedArtifact",
      "description": "",
      "group": "PF",
      "base_type": null
    },
    {
      "name": "BaseController",
      "description": "",
      "group": "MDK",
      "base_type": null
    },
    {
      "name": "bytes",
      "description": "",
      "group": "Standard",
      "base_type": null
    },
    {
      "name": "typing.Dict[str, float]",
      "description": "",
      "group": "Data",
      "base_type": null
    },
    {
      "name": "PropagateType",
      "description": "",
      "group": "Flow Control",
      "base_type": null
    },
    {
      "name": "typing.Any",
      "description": "",
      "group": "Standard",
      "base_type": null
    },
    {
      "name": "typing.Union[platform_mdk.controllers.fuzzy.base.BaseFuzzyController, platform_mdk.controllers.fuzzy.err_diff_fuzzy.ErrDiffFuzzy]",
      "description": "",
      "group": "MDK",
      "base_type": "BaseController"
    },
    {
      "name": "FuzzyPID",
      "description": "",
      "group": "MDK",
      "base_type": "BaseController"
    },
    {
      "name": "int",
      "description": "",
      "group": "Standard",
      "base_type": null
    },
    {
      "name": "typing.Union[platform_mdk.controllers.mpc.sindy.SINDyMPC, platform_mdk.controllers.mpc.sindy_delta.SINDyDeltaMPC]",
      "description": "",
      "group": "MDK",
      "base_type": "BaseController"
    },
    {
      "name": "BaseFuzzyController",
      "description": "",
      "group": "MDK",
      "base_type": null
    },
    {
      "name": "SwitchController",
      "description": "",
      "group": "MDK",
      "base_type": null
    },
    {
      "name": "InferenceWrapper",
      "description": "",
      "group": "MDK",
      "base_type": null
    },
    {
      "name": "typing.Union[pandas.core.frame.DataFrame, typing.Dict[str, float]]",
      "description": "",
      "group": "Data",
      "base_type": null
    }
  ],
  "mdk_version": "0.39.0",
  "pf_version": "0.17.0"
}
